// hooks/useTokenRefresh.ts
import { useAuth } from '../context/AuthContext';
import { authService } from '../services/api/authService';

export const useTokenRefresh = () => {
  const { updateUser } = useAuth();

  const forceRefreshToken = async (): Promise<boolean> => {
    try {
      console.log('üîÑ [useTokenRefresh] Force refreshing token...');
      
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('‚ùå [useTokenRefresh] No token found');
        return false;
      }

      // Decode token hi·ªán t·∫°i ƒë·ªÉ xem role
      try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        console.log('üîç [useTokenRefresh] Current token payload:', {
          role: payload.role,
          userId: payload.userId
        });
      } catch (e) {
        console.error('‚ùå [useTokenRefresh] Token decode error:', e);
      }

      // G·ªçi API getProfile ƒë·ªÉ l·∫•y th√¥ng tin m·ªõi nh·∫•t
      const profileResponse = await authService.getProfile();
      
      console.log('‚úÖ [useTokenRefresh] Profile refreshed:', {
        newRole: profileResponse.user.role,
        userId: profileResponse.user._id
      });

      // C·∫≠p nh·∫≠t context v√† localStorage
      updateUser(profileResponse.user);
      localStorage.setItem('user', JSON.stringify(profileResponse.user));

      return true;
    } catch (error) {
      console.error('‚ùå [useTokenRefresh] Force refresh failed:', error);
      return false;
    }
  };

  return { forceRefreshToken };
};