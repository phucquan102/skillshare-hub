import { paymentService } from './paymentService';
import { authService } from './authService'; // Th√™m import n√†y

export interface InstructorRequirements {
  minCourses?: number;
  verificationRequired?: boolean;
  profileCompletion?: boolean;
  paymentRequired?: boolean;
}

export interface InstructorResponse {
  success: boolean;
  message: string;
  data?: any;
  error?: string;
  tokenUpdated?: boolean; // Th√™m field m·ªõi
}

export const instructorService = {
  /**
   * T·∫°o thanh to√°n ƒë·ªÉ tr·ªü th√†nh instructor
   */
  async createInstructorPayment(): Promise<InstructorResponse> {
    try {
      console.log('üéØ [InstructorService] Creating instructor payment...');

      const response = await paymentService.createInstructorFee('stripe');
      
      if (!response.clientSecret) {
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c client secret t·ª´ server');
      }

      console.log('‚úÖ [InstructorService] Instructor payment created successfully');
      return {
        success: true,
        message: 'T·∫°o thanh to√°n instructor th√†nh c√¥ng',
        data: response
      };

    } catch (error: any) {
      console.error('‚ùå [InstructorService] Create payment error:', error);
      
      return {
        success: false,
        message: error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫°o thanh to√°n instructor',
        error: error.message
      };
    }
  },

  /**
   * X√°c nh·∫≠n thanh to√°n instructor
   */
  async confirmInstructorPayment(paymentId: string, paymentIntentId: string): Promise<InstructorResponse> {
    try {
      console.log('üéØ [InstructorService] Confirming instructor payment:', { paymentId, paymentIntentId });

      const response = await paymentService.confirmPayment({
        paymentId,
        paymentIntentId,
        status: 'completed'
      });

      console.log('‚úÖ [InstructorService] Instructor payment confirmed successfully');
      return {
        success: true,
        message: 'X√°c nh·∫≠n thanh to√°n instructor th√†nh c√¥ng',
        data: response
      };

    } catch (error: any) {
      console.error('‚ùå [InstructorService] Confirm payment error:', error);
      
      return {
        success: false,
        message: error.response?.data?.message || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n thanh to√°n instructor',
        error: error.message
      };
    }
  },

  /**
   * N√¢ng c·∫•p user l√™n instructor - PHI√äN B·∫¢N ƒê√É S·ª¨A
   */
  async upgradeToInstructor(): Promise<InstructorResponse> {
    const endpoint = `${process.env.REACT_APP_API_BASE_URL}/api/users/upgrade-to-instructor`;
    
    try {
      console.log('üîÑ [InstructorService] Upgrading to instructor...', endpoint);

      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c');
      }

      // Debug token hi·ªán t·∫°i
      console.log('üîç [InstructorService] Current token debug:', {
        tokenExists: !!token,
        tokenLength: token.length
      });

      try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        console.log('üé≠ [InstructorService] Current token payload:', {
          role: payload.role,
          userId: payload.userId,
          exp: new Date(payload.exp * 1000)
        });
      } catch (e) {
        console.error('‚ùå [InstructorService] Token decode error:', e);
      }

      const response = await fetch(endpoint, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      });

      const responseText = await response.text();
      let responseData;

      try {
        responseData = JSON.parse(responseText);
      } catch (parseError) {
        console.error('‚ùå [InstructorService] Failed to parse response:', responseText);
        throw new Error('L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ server');
      }

      if (!response.ok) {
        console.error('‚ùå [InstructorService] Upgrade failed:', {
          status: response.status,
          data: responseData
        });
        throw new Error(responseData.message || `L·ªói server: ${response.status}`);
      }

      console.log('‚úÖ [InstructorService] Upgrade API call successful');

      // üî• QUAN TR·ªåNG: X·ª≠ l√Ω token v√† profile sau khi upgrade
      let tokenUpdated = false;
      let newToken = null;

      // Tr∆∞·ªùng h·ª£p 1: Backend tr·∫£ v·ªÅ token m·ªõi trong response
      if (responseData.token) {
        console.log('üîÑ [InstructorService] New token received from backend');
        newToken = responseData.token;
        localStorage.setItem('token', newToken);
        tokenUpdated = true;
      }
      
      // Tr∆∞·ªùng h·ª£p 2: Backend tr·∫£ v·ªÅ user data m·ªõi
      if (responseData.user) {
        console.log('üîÑ [InstructorService] New user data received:', {
          role: responseData.user.role,
          id: responseData.user._id
        });
        localStorage.setItem('user', JSON.stringify(responseData.user));
      }

      // Tr∆∞·ªùng h·ª£p 3: Lu√¥n g·ªçi API getProfile ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ th√¥ng tin m·ªõi nh·∫•t
      console.log('üîÑ [InstructorService] Fetching updated profile...');
      try {
        const profileResponse = await authService.getProfile();
        console.log('‚úÖ [InstructorService] Updated profile received:', {
          role: profileResponse.user.role,
          id: profileResponse.user._id
        });
        
        // C·∫≠p nh·∫≠t localStorage v·ªõi user m·ªõi
        localStorage.setItem('user', JSON.stringify(profileResponse.user));
        
        // N·∫øu ch∆∞a c√≥ token m·ªõi t·ª´ backend, s·ª≠ d·ª•ng token hi·ªán t·∫°i nh∆∞ng ƒë√°nh d·∫•u c·∫ßn refresh
        if (!tokenUpdated) {
          console.warn('‚ö†Ô∏è [InstructorService] No new token received, current token may have old role');
          // V·∫´n ƒë√°nh d·∫•u l√† ƒë√£ update profile th√†nh c√¥ng
          tokenUpdated = true;
        }
      } catch (profileError) {
        console.error('‚ùå [InstructorService] Failed to get updated profile:', profileError);
        // Kh√¥ng throw error ·ªü ƒë√¢y v√¨ upgrade ƒë√£ th√†nh c√¥ng
      }

      console.log('‚úÖ [InstructorService] Upgrade to instructor completed successfully');
      return {
        success: true,
        message: responseData.message || 'N√¢ng c·∫•p l√™n instructor th√†nh c√¥ng',
        data: responseData,
        tokenUpdated
      };

    } catch (error: any) {
      console.error('‚ùå [InstructorService] Upgrade error:', error);
      
      return {
        success: false,
        message: error.message || 'Kh√¥ng th·ªÉ n√¢ng c·∫•p t√†i kho·∫£n l√™n instructor',
        error: error.message
      };
    }
  },

  /**
   * Force refresh token v√† profile - METHOD M·ªöI
   */
  async forceRefreshUserProfile(): Promise<boolean> {
    try {
      console.log('üîÑ [InstructorService] Force refreshing user profile...');
      
      const profileResponse = await authService.getProfile();
      console.log('‚úÖ [InstructorService] Profile refreshed:', {
        role: profileResponse.user.role,
        id: profileResponse.user._id
      });
      
      localStorage.setItem('user', JSON.stringify(profileResponse.user));
      return true;
    } catch (error) {
      console.error('‚ùå [InstructorService] Force refresh failed:', error);
      return false;
    }
  },

  /**
   * Ki·ªÉm tra v√† x·ª≠ l√Ω token sau khi upgrade - METHOD M·ªöI
   */
  async handlePostUpgradeToken(): Promise<{ success: boolean; needsRelogin: boolean }> {
    try {
      console.log('üîç [InstructorService] Handling post-upgrade token check...');
      
      // L·∫•y profile m·ªõi nh·∫•t
      const refreshed = await this.forceRefreshUserProfile();
      if (!refreshed) {
        return { success: false, needsRelogin: true };
      }

      // Ki·ªÉm tra token hi·ªán t·∫°i
      const token = localStorage.getItem('token');
      if (!token) {
        return { success: false, needsRelogin: true };
      }

      try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        const userStr = localStorage.getItem('user');
        const user = userStr ? JSON.parse(userStr) : null;
        
        console.log('üîç [InstructorService] Token vs User comparison:', {
          tokenRole: payload.role,
          userRole: user?.role,
          match: payload.role === user?.role
        });

        // N·∫øu token role v√† user role kh√¥ng kh·ªõp, c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i
        if (payload.role !== user?.role) {
          console.warn('‚ö†Ô∏è [InstructorService] Token role mismatch, needs relogin');
          return { success: false, needsRelogin: true };
        }

        return { success: true, needsRelogin: false };
      } catch (e) {
        console.error('‚ùå [InstructorService] Token check error:', e);
        return { success: false, needsRelogin: true };
      }
    } catch (error) {
      console.error('‚ùå [InstructorService] Post-upgrade handling failed:', error);
      return { success: false, needsRelogin: true };
    }
  },

  /**
   * L·∫•y y√™u c·∫ßu ƒë·ªÉ tr·ªü th√†nh instructor
   */
  async getInstructorRequirements(): Promise<InstructorRequirements> {
    console.log('üìã [InstructorService] Getting requirements...');
    
    return {
      minCourses: 0,
      verificationRequired: true,
      profileCompletion: true,
      paymentRequired: true
    };
  },

  /**
   * Ki·ªÉm tra xem user ƒë√£ l√† instructor ch∆∞a - PHI√äN B·∫¢N C·∫¢I TI·∫æN
   */
  async checkInstructorStatus(): Promise<{ 
    isInstructor: boolean; 
    canBecomeInstructor: boolean;
    needsTokenRefresh?: boolean;
  }> {
    console.log('üîç [InstructorService] Checking instructor status...');
    
    const userData = localStorage.getItem('user');
    const token = localStorage.getItem('token');
    
    if (userData && token) {
      try {
        const user = JSON.parse(userData);
        
        // Debug token ƒë·ªÉ so s√°nh
        try {
          const payload = JSON.parse(atob(token.split('.')[1]));
          console.log('üîç [InstructorService] Status check - Token vs User:', {
            tokenRole: payload.role,
            userRole: user.role,
            matches: payload.role === user.role
          });
          
          const needsTokenRefresh = payload.role !== user.role;
          
          return {
            isInstructor: user.role === 'instructor',
            canBecomeInstructor: user.role === 'student',
            needsTokenRefresh
          };
        } catch (tokenError) {
          console.error('‚ùå [InstructorService] Token decode in status check:', tokenError);
        }
        
        return {
          isInstructor: user.role === 'instructor',
          canBecomeInstructor: user.role === 'student'
        };
      } catch (error) {
        console.error('‚ùå [InstructorService] Error parsing user data:', error);
      }
    }
    
    return { 
      isInstructor: false, 
      canBecomeInstructor: false 
    };
  }
};

export default instructorService;