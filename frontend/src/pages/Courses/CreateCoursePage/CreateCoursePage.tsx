// src/pages/Courses/CreateCoursePage/CreateCoursePage.tsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../../context/AuthContext';
import { courseService, CreateCourseData, EditCourseData } from '../../../services/api/courseService';
import CourseForm from '../../../components/course/CourseForm/CourseForm';

const CreateCoursePage: React.FC = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (data: CreateCourseData | EditCourseData, submitType: 'save' | 'submit') => {
    setLoading(true);
    setError(null);
    
    try {
      console.log('üéØ [CreateCoursePage] Submitting course:', { data, submitType });

      // ‚úÖ FIX: Chu·∫©n b·ªã d·ªØ li·ªáu v·ªõi schedules
      const createData: CreateCourseData = {
        title: data.title || '',
        description: data.description || '',
        shortDescription: data.shortDescription || '',
        category: data.category || '',
        subcategory: data.subcategory || '',
        level: data.level || 'beginner',
        pricingType: data.pricingType || 'full_course',
        fullCoursePrice: data.fullCoursePrice || 0,
        maxStudents: data.maxStudents || 20,
        startDate: data.startDate || '',
        endDate: data.endDate || '',
        prerequisites: Array.isArray(data.prerequisites) 
          ? data.prerequisites 
          : (data.prerequisites ? [data.prerequisites] : []),
        learningOutcomes: Array.isArray(data.learningOutcomes) 
          ? data.learningOutcomes 
          : (data.learningOutcomes ? [data.learningOutcomes] : []),
        requirements: Array.isArray(data.requirements) 
          ? data.requirements 
          : (data.requirements ? [data.requirements] : []),
        tags: Array.isArray(data.tags) 
          ? data.tags 
          : (data.tags ? [data.tags] : []),
        language: data.language || 'vi',
        thumbnail: data.thumbnail || '',
        // ‚úÖ TH√äM: C√°c tr∆∞·ªùng m·ªõi t·ª´ interface
        schedules: (data as any).schedules || [], // L·∫•y schedules t·ª´ form data
        gallery: (data as any).gallery || [],
        coverImage: (data as any).coverImage || '',
        promoVideo: (data as any).promoVideo || '',
        // Certificate ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng t·ª´ CourseForm
        certificate: data.certificate,
        featured: data.featured || false,
        // ‚úÖ TH√äM: C√°c tr∆∞·ªùng optional kh√°c
        coInstructors: (data as any).coInstructors || [],
        discount: (data as any).discount,
        courseType: (data as any).courseType || 'live_online',
        settings: (data as any).settings
      };

      console.log('üì§ [CreateCoursePage] Final data to send:', createData);
      console.log('üìÖ Schedules in create data:', createData.schedules);

      // Validate d·ªØ li·ªáu b·∫Øt bu·ªôc
      if (!createData.title.trim()) {
        throw new Error('Ti√™u ƒë·ªÅ kh√≥a h·ªçc l√† b·∫Øt bu·ªôc');
      }
      if (!createData.description.trim()) {
        throw new Error('M√¥ t·∫£ kh√≥a h·ªçc l√† b·∫Øt bu·ªôc');
      }
      if (!createData.category.trim()) {
        throw new Error('Danh m·ª•c kh√≥a h·ªçc l√† b·∫Øt bu·ªôc');
      }
      if (!createData.startDate) {
        throw new Error('Ng√†y b·∫Øt ƒë·∫ßu l√† b·∫Øt bu·ªôc');
      }
      if (!createData.endDate) {
        throw new Error('Ng√†y k·∫øt th√∫c l√† b·∫Øt bu·ªôc');
      }

      // ‚úÖ FIX: Validate schedules - B·∫ÆT BU·ªòC c√≥ √≠t nh·∫•t 1 schedule
      if (!createData.schedules || createData.schedules.length === 0) {
        throw new Error('C·∫ßn √≠t nh·∫•t m·ªôt l·ªãch h·ªçc cho kh√≥a h·ªçc');
      }

      // Validate dates
      const startDate = new Date(createData.startDate);
      const endDate = new Date(createData.endDate);
      if (startDate >= endDate) {
        throw new Error('Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu');
      }

      // Validate pricing
      if ((createData.pricingType === 'full_course' || createData.pricingType === 'both') && 
          (!createData.fullCoursePrice || createData.fullCoursePrice <= 0)) {
        throw new Error('Gi√° kh√≥a h·ªçc ph·∫£i l·ªõn h∆°n 0 khi ch·ªçn thanh to√°n tr·ªçn kh√≥a');
      }

      let response;
      
      if (submitType === 'save') {
        // T·∫°o course v·ªõi status draft
        response = await courseService.createCourse(createData);
        console.log('‚úÖ Course created as draft:', response);
        alert('Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng d∆∞·ªõi d·∫°ng b·∫£n nh√°p!');
      } else {
        // T·∫°o course v√† sau ƒë√≥ submit ƒë·ªÉ ph√™ duy·ªát
        response = await courseService.createCourse(createData);
        console.log('‚úÖ Course created, submitting for approval:', response);
        
        // Submit course ƒë·ªÉ ph√™ duy·ªát
        await courseService.submitForApproval(response.course._id);
        alert('Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c t·∫°o v√† g·ª≠i ƒë·ªÉ admin ph√™ duy·ªát!');
      }

      // ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang qu·∫£n l√Ω kh√≥a h·ªçc
      navigate('/instructor/courses');

    } catch (error: any) {
      console.error('‚ùå Error creating course:', error);
      setError(error.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o kh√≥a h·ªçc');
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    navigate('/instructor/courses');
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">T·∫°o kh√≥a h·ªçc m·ªõi</h1>
          <p className="text-gray-600 mt-2">ƒêi·ªÅn th√¥ng tin b√™n d∆∞·ªõi ƒë·ªÉ t·∫°o kh√≥a h·ªçc m·ªõi</p>
        </div>

        {/* Error Message */}
        {error && (
          <div className="bg-red-50 border border-red-200 text-red-700 p-4 rounded-xl mb-6">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <h3 className="text-sm font-medium text-red-800">L·ªói khi t·∫°o kh√≥a h·ªçc</h3>
                <div className="mt-2 text-sm text-red-700">
                  <p>{error}</p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Course Form */}
        <div className="bg-white rounded-2xl shadow-lg p-6">
          <CourseForm 
            onSubmit={handleSubmit}
            onCancel={handleCancel}
            submitting={loading}
            isEdit={false}
          />
        </div>

        {/* Help Text */}
        <div className="mt-6 bg-blue-50 border border-blue-200 rounded-xl p-4">
          <h3 className="font-semibold text-blue-900 mb-2">H∆∞·ªõng d·∫´n t·∫°o kh√≥a h·ªçc</h3>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>‚Ä¢ <strong>L∆∞u b·∫£n nh√°p:</strong> Kh√≥a h·ªçc s·∫Ω ƒë∆∞·ª£c l∆∞u d∆∞·ªõi d·∫°ng nh√°p v√† b·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a sau</li>
            <li>‚Ä¢ <strong>G·ª≠i ƒë·ªÉ ph√™ duy·ªát:</strong> Kh√≥a h·ªçc s·∫Ω ƒë∆∞·ª£c g·ª≠i cho admin xem x√©t v√† ph√™ duy·ªát</li>
            <li>‚Ä¢ C√°c tr∆∞·ªùng c√≥ d·∫•u * l√† b·∫Øt bu·ªôc</li>
            <li>‚Ä¢ <strong>L·ªãch h·ªçc:</strong> B·∫Øt bu·ªôc ph·∫£i c√≥ √≠t nh·∫•t m·ªôt l·ªãch h·ªçc</li>
            <li>‚Ä¢ ƒê·∫£m b·∫£o th√¥ng tin m√¥ t·∫£ r√µ r√†ng v√† h·∫•p d·∫´n</li>
            <li>‚Ä¢ Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu</li>
            <li>‚Ä¢ Gi√° kh√≥a h·ªçc ph·∫£i l·ªõn h∆°n 0 khi ch·ªçn thanh to√°n tr·ªçn kh√≥a</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default CreateCoursePage;