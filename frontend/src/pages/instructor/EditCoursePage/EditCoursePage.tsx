// src/pages/instructor/EditCoursePage/EditCoursePage.tsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../../../context/AuthContext';
import { courseService, Course, EditCourseData, CreateCourseData } from '../../../services/api/courseService';
import CourseForm from '../../../components/course/CourseForm/CourseForm';
import { FiArrowLeft, FiSend, FiAlertCircle } from 'react-icons/fi';

const EditCoursePage: React.FC = () => {
  const { courseId } = useParams<{ courseId: string }>();
  const navigate = useNavigate();
  const { user } = useAuth();
  const [course, setCourse] = useState<Course | null>(null);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchCourse = async () => {
      if (!courseId) {
        setError('Kh√¥ng t√¨m th·∫•y ID kh√≥a h·ªçc');
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        setError(null);
        
        console.log('üîç [EditCoursePage] Fetching instructor course:', courseId);
        console.log('üë§ Current user:', user);

        // ‚úÖ G·ªçi API ƒë√∫ng route cho instructor
        const response = await courseService.getInstructorCourseById(courseId);
        const courseData = response.course;

        console.log('üìö Course fetched:', courseData);
        console.log('üìÖ Current schedules:', courseData.schedules);

        // ‚úÖ FIX: Ki·ªÉm tra d·ªØ li·ªáu course c√≥ t·ªìn t·∫°i kh√¥ng
        if (!courseData) {
          setError('Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√≥a h·ªçc');
          setLoading(false);
          return;
        }

        // ‚úÖ FIX QUAN TR·ªåNG: X·ª≠ l√Ω c·∫£ 2 tr∆∞·ªùng h·ª£p instructor l√† object ho·∫∑c string
        let instructorId: string;
        
        if (typeof courseData.instructor === 'string') {
          // Tr∆∞·ªùng h·ª£p instructor l√† string ID
          instructorId = courseData.instructor;
          console.log('üìù Instructor is string:', instructorId);
        } else if (courseData.instructor && courseData.instructor._id) {
          // Tr∆∞·ªùng h·ª£p instructor l√† object c√≥ _id
          instructorId = courseData.instructor._id;
          console.log('üìù Instructor is object with _id:', instructorId);
        } else {
          console.error('‚ùå Invalid instructor data:', courseData.instructor);
          setError('D·ªØ li·ªáu instructor kh√¥ng h·ª£p l·ªá');
          setLoading(false);
          return;
        }

        const userId = user?._id || user?.id;
        
        console.log('üîê [DEBUG] Permission check details:', {
          instructorId,
          userId,
          typeOfInstructorId: typeof instructorId,
          typeOfUserId: typeof userId,
          stringInstructorId: String(instructorId),
          stringUserId: String(userId),
          equality: String(instructorId) === String(userId)
        });

        // ‚úÖ Ki·ªÉm tra quy·ªÅn CH√çNH X√ÅC
        const isAdmin = user?.role === 'admin';
        const isCourseInstructor = String(instructorId) === String(userId);

        console.log('üîê [DEBUG] Permission results:', { 
          isAdmin, 
          isCourseInstructor,
          userRole: user?.role
        });

        if (!isAdmin && !isCourseInstructor) {
          console.error('‚ùå Permission denied - Details:', {
            isAdmin,
            isCourseInstructor,
            instructorId,
            userId
          });
          setError('B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a kh√≥a h·ªçc n√†y');
          setLoading(false);
          return;
        }

        console.log('‚úÖ Permission granted - User can edit this course');
        setCourse(courseData);
      } catch (error: any) {
        console.error('‚ùå Error fetching course:', error);
        const errorMessage = error.response?.data?.message || error.message || 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin kh√≥a h·ªçc';
        setError(errorMessage);
      } finally {
        setLoading(false);
      }
    };

    fetchCourse();
  }, [courseId, user]);

 const handleSubmit = async (
  formData: CreateCourseData | EditCourseData,
  submitType: 'save' | 'submit'
) => {
  if (!courseId || !course) {
    setError('Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc ƒë·ªÉ c·∫≠p nh·∫≠t');
    return;
  }

  try {
    setSubmitting(true);
    setError(null);

    console.log('üéØ [EditCoursePage] Submitting:', { formData, submitType });

    // ‚úÖ FIX QUAN TR·ªåNG: Chu·∫©n b·ªã d·ªØ li·ªáu update
    const updateData: EditCourseData = {
      title: formData.title,
      description: formData.description,
      shortDescription: formData.shortDescription,
      category: formData.category,
      subcategory: formData.subcategory,
      level: formData.level,
      pricingType: formData.pricingType,
      fullCoursePrice: formData.fullCoursePrice,
      maxStudents: formData.maxStudents,
      prerequisites: formData.prerequisites,
      learningOutcomes: formData.learningOutcomes,
      requirements: formData.requirements,
      tags: formData.tags,
      language: formData.language,
      thumbnail: formData.thumbnail,
      coverImage: formData.coverImage,
      promoVideo: formData.promoVideo,
      gallery: formData.gallery,
      featured: formData.featured,
      certificate: formData.certificate,
      
      // ‚úÖ QUAN TR·ªåNG: Ch·ªâ g·ª≠i schedules n·∫øu c√≥ thay ƒë·ªïi, kh√¥ng g·ª≠i n·∫øu kh√¥ng c√≥
      schedules: (formData as any).schedules && (formData as any).schedules.length > 0 
        ? (formData as any).schedules 
        : undefined // Kh√¥ng g·ª≠i tr∆∞·ªùng n√†y n·∫øu kh√¥ng thay ƒë·ªïi
    };

    // ‚úÖ FIX: Lo·∫°i b·ªè c√°c tr∆∞·ªùng undefined ƒë·ªÉ tr√°nh l·ªói server
    Object.keys(updateData).forEach(key => {
      if (updateData[key as keyof EditCourseData] === undefined) {
        delete updateData[key as keyof EditCourseData];
      }
    });

    console.log('üì§ Final update data:', updateData);
    console.log('üìÖ Schedules in update data:', updateData.schedules);

    let response;
    
    if (submitType === 'save') {
      response = await courseService.updateCourse(courseId, updateData);
      console.log('‚úÖ Course saved as draft:', response);
      alert('ƒê√£ l∆∞u thay ƒë·ªïi th√†nh c√¥ng!');
    } else {
      response = await courseService.updateCourse(courseId, updateData);
      console.log('‚úÖ Course updated, submitting for approval:', response);
      
      // Ch·ªâ submit for approval n·∫øu course ch∆∞a ƒë∆∞·ª£c approved
      if (course.approvalStatus?.status !== 'approved') {
        await courseService.submitForApproval(courseId);
        alert('Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† g·ª≠i ƒë·ªÉ admin ph√™ duy·ªát!');
      } else {
        alert('Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!');
      }
    }

    // Quay l·∫°i trang qu·∫£n l√Ω kh√≥a h·ªçc
    navigate('/instructor/courses');
  } catch (error: any) {
    console.error('‚ùå Error updating course:', error);
    
    // ‚úÖ FIX: Hi·ªÉn th·ªã th√¥ng b√°o l·ªói chi ti·∫øt h∆°n
    let errorMessage = 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t kh√≥a h·ªçc';
    
    if (error.response?.data?.message) {
      errorMessage = error.response.data.message;
    } else if (error.message) {
      errorMessage = error.message;
    }
    
    // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói chi ti·∫øt t·ª´ server n·∫øu c√≥
    if (error.response?.data?.details) {
      console.error('üìã Server error details:', error.response.data.details);
      errorMessage += `\nChi ti·∫øt: ${JSON.stringify(error.response.data.details)}`;
    }
    
    setError(errorMessage);
  } finally {
    setSubmitting(false);
  }
};
  const handleCancel = () => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy? C√°c thay ƒë·ªïi ch∆∞a l∆∞u s·∫Ω b·ªã m·∫•t.')) {
      navigate('/instructor/courses');
    }
  };

  // Hi·ªÉn th·ªã loading
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="flex flex-col items-center gap-4">
          <div className="w-12 h-12 border-4 border-emerald-500 border-t-transparent rounded-full animate-spin"></div>
          <p className="text-gray-600">ƒêang t·∫£i th√¥ng tin kh√≥a h·ªçc...</p>
        </div>
      </div>
    );
  }

  // Hi·ªÉn th·ªã l·ªói n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c course
  if (error && !course) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white p-8 rounded-2xl shadow-lg text-center max-w-md">
          <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <FiAlertCircle className="w-8 h-8 text-red-600" />
          </div>
          <h2 className="text-xl font-bold text-gray-900 mb-2">L·ªói</h2>
          <p className="text-gray-600 mb-6">{error}</p>
          <div className="flex gap-4 justify-center">
            <button
              onClick={() => window.location.reload()}
              className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors"
            >
              Th·ª≠ l·∫°i
            </button>
            <button
              onClick={() => navigate('/instructor/courses')}
              className="px-4 py-2 bg-emerald-500 text-white rounded-lg hover:bg-emerald-600 transition-colors"
            >
              Quay l·∫°i
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Hi·ªÉn th·ªã n·∫øu kh√¥ng t√¨m th·∫•y course
  if (!course) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <FiAlertCircle className="w-8 h-8 text-yellow-600" />
          </div>
          <h2 className="text-xl font-bold text-gray-900 mb-2">Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc</h2>
          <p className="text-gray-600 mb-6">Kh√≥a h·ªçc b·∫°n ƒëang t√¨m ki·∫øm kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.</p>
          <button
            onClick={() => navigate('/instructor/courses')}
            className="px-6 py-3 bg-emerald-500 text-white rounded-xl hover:bg-emerald-600 transition-colors"
          >
            Quay l·∫°i danh s√°ch kh√≥a h·ªçc
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <button
            onClick={handleCancel}
            className="flex items-center gap-2 text-gray-600 hover:text-gray-900 mb-4 transition-colors group"
          >
            <FiArrowLeft className="w-5 h-5 group-hover:-translate-x-1 transition-transform" />
            Quay l·∫°i danh s√°ch kh√≥a h·ªçc
          </button>

          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
            <div className="flex-1">
              <h1 className="text-3xl font-bold text-gray-900">Ch·ªânh s·ª≠a kh√≥a h·ªçc</h1>
              <div className="flex flex-wrap items-center gap-2 mt-2">
                <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                  course.status === 'published' 
                    ? 'bg-green-100 text-green-800' 
                    : course.status === 'pending_review'
                    ? 'bg-yellow-100 text-yellow-800'
                    : 'bg-gray-100 text-gray-800'
                }`}>
                  {course.status === 'published'
                    ? 'ƒê√£ xu·∫•t b·∫£n'
                    : course.status === 'pending_review'
                    ? 'ƒêang ch·ªù duy·ªát'
                    : 'B·∫£n nh√°p'}
                </span>
                
                <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                  course.approvalStatus?.status === 'approved'
                    ? 'bg-green-100 text-green-800'
                    : course.approvalStatus?.status === 'rejected'
                    ? 'bg-red-100 text-red-800'
                    : 'bg-yellow-100 text-yellow-800'
                }`}>
                  {course.approvalStatus?.status === 'approved'
                    ? 'ƒê√£ ph√™ duy·ªát'
                    : course.approvalStatus?.status === 'rejected'
                    ? 'B·ªã t·ª´ ch·ªëi'
                    : 'Ch∆∞a ph√™ duy·ªát'}
                </span>

                {course.schedules && course.schedules.length > 0 && (
                  <span className="px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                    üìÖ {course.schedules.length} l·ªãch h·ªçc
                  </span>
                )}
              </div>
              
              <p className="text-gray-600 mt-3 max-w-2xl">
                {course.title}
              </p>
            </div>

            {/* Quick Actions */}
            <div className="mt-4 sm:mt-0 flex gap-2">
              <button
                onClick={() => window.open(`/courses/${course._id}`, '_blank')}
                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Xem tr∆∞·ªõc
              </button>
            </div>
          </div>
        </div>

        {/* Error Alert */}
        {error && (
          <div className="bg-red-50 border border-red-200 text-red-700 p-4 rounded-xl mb-6">
            <div className="flex items-start gap-3">
              <FiAlertCircle className="w-5 h-5 mt-0.5 flex-shrink-0" />
              <div>
                <h4 className="font-semibold">L·ªói khi c·∫≠p nh·∫≠t kh√≥a h·ªçc</h4>
                <p className="mt-1 text-sm">{error}</p>
              </div>
            </div>
          </div>
        )}

        {/* Main Form */}
        <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
          <CourseForm
            course={course}
            onSubmit={handleSubmit}
            onCancel={handleCancel}
            submitting={submitting}
            isEdit={true}
          />
        </div>

        {/* Course Status Information */}
        <div className="bg-blue-50 border border-blue-200 rounded-xl p-6 mb-6">
          <h3 className="font-semibold text-blue-900 mb-3 flex items-center gap-2">
            <FiSend className="w-5 h-5" />
            Tr·∫°ng th√°i kh√≥a h·ªçc
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm">
            <div className="bg-white rounded-lg p-3 border border-blue-100">
              <div className="text-blue-600 font-medium">Tr·∫°ng th√°i</div>
              <div className="text-blue-900 mt-1">
                {course.status === 'published'
                  ? 'üü¢ ƒê√£ xu·∫•t b·∫£n'
                  : course.status === 'pending_review'
                  ? 'üü° ƒêang ch·ªù duy·ªát'
                  : '‚ö´ B·∫£n nh√°p'}
              </div>
            </div>
            
            <div className="bg-white rounded-lg p-3 border border-blue-100">
              <div className="text-blue-600 font-medium">Ph√™ duy·ªát</div>
              <div className="text-blue-900 mt-1">
                {course.approvalStatus?.status === 'approved'
                  ? '‚úÖ ƒê√£ ph√™ duy·ªát'
                  : course.approvalStatus?.status === 'rejected'
                  ? '‚ùå B·ªã t·ª´ ch·ªëi'
                  : '‚è≥ ƒêang ch·ªù'}
              </div>
            </div>
            
            <div className="bg-white rounded-lg p-3 border border-blue-100">
              <div className="text-blue-600 font-medium">H·ªçc vi√™n</div>
              <div className="text-blue-900 mt-1">
                {course.currentEnrollments || 0} / {course.maxStudents || 20}
              </div>
            </div>
            
            <div className="bg-white rounded-lg p-3 border border-blue-100">
              <div className="text-blue-600 font-medium">ƒê√°nh gi√°</div>
              <div className="text-blue-900 mt-1">
                ‚≠ê {course.ratings?.average?.toFixed(1) || '0.0'} ({course.ratings?.count || 0})
              </div>
            </div>
          </div>

          {course.approvalStatus?.reason && (
            <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
              <div className="text-yellow-800 text-sm">
                <strong>L√Ω do t·ª´ admin:</strong> {course.approvalStatus.reason}
              </div>
            </div>
          )}
        </div>

        {/* Current Schedules Information */}
        {course.schedules && course.schedules.length > 0 && (
          <div className="bg-green-50 border border-green-200 rounded-xl p-6">
            <h3 className="font-semibold text-green-900 mb-3 flex items-center gap-2">
              üìÖ L·ªãch h·ªçc hi·ªán t·∫°i
            </h3>
            <div className="text-sm text-green-800">
              <p className="mb-3">C√°c l·ªãch h·ªçc sau s·∫Ω ƒë∆∞·ª£c gi·ªØ nguy√™n n·∫øu b·∫°n kh√¥ng thay ƒë·ªïi trong form:</p>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {course.schedules.map((schedule, index) => (
                  <div key={index} className="bg-white rounded-lg p-3 border border-green-100">
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="font-medium text-green-900">
                          {schedule.dayOfWeek === 0 ? 'Ch·ªß nh·∫≠t' :
                           schedule.dayOfWeek === 1 ? 'Th·ª© 2' :
                           schedule.dayOfWeek === 2 ? 'Th·ª© 3' :
                           schedule.dayOfWeek === 3 ? 'Th·ª© 4' :
                           schedule.dayOfWeek === 4 ? 'Th·ª© 5' :
                           schedule.dayOfWeek === 5 ? 'Th·ª© 6' : 'Th·ª© 7'}
                        </div>
                        <div className="text-green-700 text-sm mt-1">
                          ‚è∞ {schedule.startTime} - {schedule.endTime}
                        </div>
                        {schedule.meetingPlatform && schedule.meetingPlatform !== 'none' && (
                          <div className="text-green-600 text-xs mt-1">
                            üìç {schedule.meetingPlatform === 'zoom' ? 'Zoom' :
                                schedule.meetingPlatform === 'google_meet' ? 'Google Meet' :
                                schedule.meetingPlatform === 'microsoft_teams' ? 'Microsoft Teams' : 'Online'}
                          </div>
                        )}
                      </div>
                      <div className={`w-3 h-3 rounded-full ${
                        schedule.isActive ? 'bg-green-500' : 'bg-gray-300'
                      }`} title={schedule.isActive ? 'ƒêang ho·∫°t ƒë·ªông' : 'ƒê√£ t·∫Øt'}></div>
                    </div>
                  </div>
                ))}
              </div>
              
              <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                <p className="text-blue-700 text-sm">
                  üí° <strong>L∆∞u √Ω:</strong> N·∫øu b·∫°n th√™m l·ªãch h·ªçc m·ªõi trong form, t·∫•t c·∫£ l·ªãch h·ªçc c≈© s·∫Ω b·ªã thay th·∫ø. 
                  ƒê·ªÉ gi·ªØ nguy√™n l·ªãch h·ªçc hi·ªán t·∫°i, kh√¥ng thay ƒë·ªïi ph·∫ßn l·ªãch h·ªçc trong form.
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Debug Information (ch·ªâ hi·ªÉn th·ªã trong development) */}
        {process.env.NODE_ENV === 'development' && (
          <div className="mt-6 bg-gray-100 border border-gray-300 rounded-xl p-4">
            <h3 className="font-semibold text-gray-900 mb-2">Debug Information</h3>
            <details>
              <summary className="cursor-pointer text-sm text-gray-600">Xem chi ti·∫øt d·ªØ li·ªáu course</summary>
              <pre className="mt-2 text-xs bg-gray-800 text-green-400 p-3 rounded-lg overflow-auto max-h-60">
                {JSON.stringify(course, null, 2)}
              </pre>
            </details>
          </div>
        )}
      </div>
    </div>
  );
};

export default EditCoursePage;