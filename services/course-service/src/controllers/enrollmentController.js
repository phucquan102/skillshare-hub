const Enrollment = require('../models/Enrollment');
const Course = require('../models/Course');

exports.createEnrollment = async (req, res) => {
  try {
    const { courseId, paymentId } = req.body;
    const studentId = req.userId;

    console.log("üéØ Creating enrollment for student:", studentId);
    console.log("üìù Course ID:", courseId);
    console.log("üí≥ Payment ID:", paymentId);

    // Validate input
    if (!courseId || !paymentId) {
      return res.status(400).json({ 
        message: 'courseId v√† paymentId l√† b·∫Øt bu·ªôc' 
      });
    }

    // Ki·ªÉm tra course t·ªìn t·∫°i
    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ 
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' 
      });
    }

    // Ki·ªÉm tra course ƒë√£ published ch∆∞a
    if (course.status !== 'published') {
      return res.status(400).json({ 
        message: 'Kh√≥a h·ªçc ch∆∞a ƒë∆∞·ª£c xu·∫•t b·∫£n' 
      });
    }

    // Ki·ªÉm tra ƒë√£ ƒëƒÉng k√Ω ch∆∞a
    const existingEnrollment = await Enrollment.findOne({
      studentId,
      courseId
    });

    if (existingEnrollment) {
      return res.status(400).json({ 
        message: 'B·∫°n ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y r·ªìi' 
      });
    }

    // Ki·ªÉm tra kh√≥a h·ªçc c√≥ c√≤n ch·ªó kh√¥ng
    if (course.currentEnrollments >= course.maxStudents) {
      return res.status(400).json({ 
        message: 'Kh√≥a h·ªçc ƒë√£ ƒë·∫ßy' 
      });
    }

    // T·∫°o enrollment
    const enrollment = new Enrollment({
      studentId,
      courseId,
      paymentId,
      enrolledAt: new Date(),
      status: 'active'
    });

    await enrollment.save();

    // TƒÉng s·ªë l∆∞·ª£ng enrollment trong course
    course.currentEnrollments += 1;
    await course.save();

    console.log('‚úÖ Enrollment created successfully:', enrollment._id);

    res.status(201).json({
      success: true,
      message: 'ƒêƒÉng k√Ω kh√≥a h·ªçc th√†nh c√¥ng',
      enrollment
    });

  } catch (error) {
    console.error('‚ùå Error creating enrollment:', error);
    
    // Handle duplicate key error (11000)
    if (error.code === 11000) {
      return res.status(400).json({ 
        message: 'B·∫°n ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y r·ªìi' 
      });
    }

    res.status(500).json({ 
      message: 'L·ªói server khi ƒëƒÉng k√Ω kh√≥a h·ªçc',
      error: error.message 
    });
  }
};

exports.getMyEnrollments = async (req, res) => {
  try {
    const studentId = req.userId;
    const { page = 1, limit = 10, status } = req.query;

    console.log("üìã Fetching enrollments for student:", studentId);

    // Build query
    const query = { studentId };
    if (status) {
      query.status = status;
    }

    // Get enrollments with pagination
    const enrollments = await Enrollment.find(query)
      .populate('courseId')
      .sort({ enrolledAt: -1 })
      .limit(Number(limit))
      .skip((Number(page) - 1) * Number(limit))
      .lean();

    const total = await Enrollment.countDocuments(query);

    res.json({
      success: true,
      enrollments,
      pagination: {
        currentPage: Number(page),
        totalPages: Math.ceil(total / Number(limit)),
        totalEnrollments: total
      }
    });

  } catch (error) {
    console.error('‚ùå Error fetching enrollments:', error);
    res.status(500).json({ 
      message: 'L·ªói server khi l·∫•y danh s√°ch ƒëƒÉng k√Ω',
      error: error.message 
    });
  }
};
exports.deleteEnrollment = async (req, res) => {
  try {
    const studentId = req.userId;
    const enrollmentId = req.params.id;

    const enrollment = await Enrollment.findOneAndDelete({
      _id: enrollmentId,
      studentId: studentId
    });

    if (!enrollment) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y enrollment ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn xo√°' });
    }

    // Gi·∫£m s·ªë l∆∞·ª£ng enrollment trong course
    await Course.findByIdAndUpdate(enrollment.courseId, {
      $inc: { currentEnrollments: -1 }
    });

    res.json({ success: true, message: 'Xo√° enrollment th√†nh c√¥ng' });
  } catch (error) {
    console.error('‚ùå Error deleting enrollment:', error);
    res.status(500).json({ message: 'L·ªói server khi xo√° enrollment', error: error.message });
  }
};
