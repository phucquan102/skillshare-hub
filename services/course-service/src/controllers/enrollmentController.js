const mongoose = require('mongoose');
const Enrollment = require('../models/Enrollment');
const Course = require('../models/Course');

/**
 * =====================
 *  CREATE ENROLLMENT
 * =====================
 */
exports.createEnrollment = async (req, res) => {
  try {
    const { courseId, paymentId } = req.body;
    const studentId = new mongoose.Types.ObjectId(req.userId); // √©p ObjectId

    console.log("üéØ [createEnrollment]");
    console.log("‚û°Ô∏è StudentId (from token):", req.userId);
    console.log("‚û°Ô∏è StudentId (ObjectId):", studentId.toString());
    console.log("‚û°Ô∏è CourseId (body):", courseId);
    console.log("‚û°Ô∏è PaymentId (body):", paymentId);

    // Validate input
    if (!courseId || !paymentId) {
      console.log("‚ùå Missing input");
      return res.status(400).json({ 
        message: 'courseId v√† paymentId l√† b·∫Øt bu·ªôc' 
      });
    }

    // Ki·ªÉm tra course t·ªìn t·∫°i
    const course = await Course.findById(courseId);
    console.log("üìö Course found:", course ? course._id.toString() : null);
    if (!course) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
    }

    // Ki·ªÉm tra course ƒë√£ published ch∆∞a
    if (course.status !== 'published') {
      console.log("‚ö†Ô∏è Course not published:", course.status);
      return res.status(400).json({ message: 'Kh√≥a h·ªçc ch∆∞a ƒë∆∞·ª£c xu·∫•t b·∫£n' });
    }

    // Ki·ªÉm tra ƒë√£ ƒëƒÉng k√Ω ch∆∞a
    console.log("üîé Checking for existing enrollment...");
    const existingEnrollment = await Enrollment.findOne({
      studentId: new mongoose.Types.ObjectId(studentId),
      courseId: new mongoose.Types.ObjectId(courseId)
    });

    console.log("üìå Query ->", {
      studentId: studentId.toString(),
      courseId: courseId.toString()
    });
    console.log("üìå existingEnrollment:", existingEnrollment ? existingEnrollment._id.toString() : null);

    if (existingEnrollment) {
      return res.status(400).json({ message: 'B·∫°n ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y r·ªìi' });
    }

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng
    console.log(`üë• CurrentEnrollments: ${course.currentEnrollments} / ${course.maxStudents}`);
    if (course.currentEnrollments >= course.maxStudents) {
      return res.status(400).json({ message: 'Kh√≥a h·ªçc ƒë√£ ƒë·∫ßy' });
    }

    // T·∫°o enrollment m·ªõi
    const enrollment = new Enrollment({
      studentId,
      courseId: new mongoose.Types.ObjectId(courseId),
      paymentId: new mongoose.Types.ObjectId(paymentId),
      enrolledAt: new Date(),
      status: 'active'
    });

    await enrollment.save();
    console.log("‚úÖ Enrollment created:", enrollment._id.toString());

    // Update course count
    course.currentEnrollments += 1;
    await course.save();
    console.log("üìà Course enrollment count updated:", course.currentEnrollments);

    return res.status(201).json({
      success: true,
      message: 'ƒêƒÉng k√Ω kh√≥a h·ªçc th√†nh c√¥ng',
      enrollment
    });

  } catch (error) {
    console.error("‚ùå Error in createEnrollment:", error);

    if (error.code === 11000) {
      return res.status(400).json({ message: 'B·∫°n ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y r·ªìi' });
    }

    return res.status(500).json({ 
      message: 'L·ªói server khi ƒëƒÉng k√Ω kh√≥a h·ªçc',
      error: error.message 
    });
  }
};

/**
 * =====================
 *  GET MY ENROLLMENTS
 * =====================
 */
exports.getMyEnrollments = async (req, res) => {
  try {
    const studentId = new mongoose.Types.ObjectId(req.userId);
    const { page = 1, limit = 10, status } = req.query;

    console.log("üìã [getMyEnrollments] for student:", studentId.toString());

    const query = { studentId };
    if (status) query.status = status;

    const enrollments = await Enrollment.find(query)
      .populate('courseId')
      .sort({ enrolledAt: -1 })
      .limit(Number(limit))
      .skip((Number(page) - 1) * Number(limit))
      .lean();

    const total = await Enrollment.countDocuments(query);
    console.log(`üìä Found ${total} enrollments`);

    res.json({
      success: true,
      enrollments,
      pagination: {
        currentPage: Number(page),
        totalPages: Math.ceil(total / Number(limit)),
        totalEnrollments: total
      }
    });

  } catch (error) {
    console.error("‚ùå Error in getMyEnrollments:", error);
    res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch ƒëƒÉng k√Ω', error: error.message });
  }
};

/**
 * =====================
 *  DELETE ENROLLMENT
 * =====================
 */
exports.deleteEnrollment = async (req, res) => {
  try {
    const studentId = new mongoose.Types.ObjectId(req.userId);
    const enrollmentId = req.params.id;

    console.log("üóë [deleteEnrollment]");
    console.log("‚û°Ô∏è StudentId:", studentId.toString());
    console.log("‚û°Ô∏è EnrollmentId:", enrollmentId);

    const enrollment = await Enrollment.findOneAndDelete({
      _id: enrollmentId,
      studentId
    });

    console.log("üìå Deleted enrollment:", enrollment ? enrollment._id.toString() : null);

    if (!enrollment) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y enrollment ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn xo√°' });
    }

    await Course.findByIdAndUpdate(enrollment.courseId, {
      $inc: { currentEnrollments: -1 }
    });

    console.log("üìâ Course enrollment count decreased");

    res.json({ success: true, message: 'Xo√° enrollment th√†nh c√¥ng' });
  } catch (error) {
    console.error("‚ùå Error in deleteEnrollment:", error);
    res.status(500).json({ message: 'L·ªói server khi xo√° enrollment', error: error.message });
  }
};
