// enrollment-service/src/controllers/enrollmentController.js
const mongoose = require('mongoose');
const Enrollment = require('../models/Enrollment');
const Course = require('../models/Course');
const Lesson = require('../models/Lesson');

/**
 * =====================
 *  PURCHASE INDIVIDUAL LESSON
 * =====================
 */
const purchaseLesson = async (req, res) => {
  try {
    const { courseId, lessonId, paymentId, price } = req.body;
    const studentId = new mongoose.Types.ObjectId(req.userId);

    console.log("üõí [purchaseLesson]");
    console.log("‚û°Ô∏è StudentId:", studentId.toString());
    console.log("‚û°Ô∏è CourseId:", courseId);
    console.log("‚û°Ô∏è LessonId:", lessonId);

    // Validate input
    if (!courseId || !lessonId || !paymentId || !price) {
      return res.status(400).json({ 
        message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: courseId, lessonId, paymentId, price' 
      });
    }

    // Ki·ªÉm tra course t·ªìn t·∫°i v√† cho ph√©p mua lesson ri√™ng
    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
    }

    if (!['per_lesson', 'both'].includes(course.pricingType)) {
      return res.status(400).json({ 
        message: 'Kh√≥a h·ªçc n√†y kh√¥ng cho ph√©p mua t·ª´ng b√†i h·ªçc ri√™ng l·∫ª' 
      });
    }

    // Ki·ªÉm tra lesson t·ªìn t·∫°i
    const lesson = await Lesson.findById(lessonId);
    if (!lesson) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i h·ªçc' });
    }

    // T√¨m enrollment
    let enrollment = await Enrollment.findOne({
      studentId,
      courseId: new mongoose.Types.ObjectId(courseId)
    });

    // üî• QUAN TR·ªåNG: Ki·ªÉm tra xem user ƒë√£ c√≥ full access ch∆∞a
    if (enrollment && enrollment.hasFullAccess) {
      return res.status(400).json({ 
        message: 'B·∫°n ƒë√£ mua to√†n b·ªô kh√≥a h·ªçc, kh√¥ng c·∫ßn mua b√†i h·ªçc ri√™ng l·∫ª' 
      });
    }

    if (enrollment) {
      // Ki·ªÉm tra xem ƒë√£ mua lesson n√†y ch∆∞a
      const alreadyPurchased = enrollment.purchasedLessons.some(
        purchase => purchase.lessonId.toString() === lessonId
      );

      if (alreadyPurchased) {
        return res.status(400).json({ 
          message: 'B·∫°n ƒë√£ mua b√†i h·ªçc n√†y r·ªìi' 
        });
      }

      // Th√™m lesson v√†o danh s√°ch ƒë√£ mua
      enrollment.purchasedLessons.push({
        lessonId: new mongoose.Types.ObjectId(lessonId),
        price,
        purchasedAt: new Date()
      });

    } else {
      // T·∫°o enrollment m·ªõi v·ªõi lesson ƒë√£ mua
      enrollment = new Enrollment({
        studentId,
        courseId: new mongoose.Types.ObjectId(courseId),
        paymentId: new mongoose.Types.ObjectId(paymentId),
        purchasedLessons: [{
          lessonId: new mongoose.Types.ObjectId(lessonId),
          price,
          purchasedAt: new Date()
        }],
        enrolledAt: new Date(),
        status: 'active'
      });
    }

    await enrollment.save();
    console.log("‚úÖ Lesson purchased successfully");

    res.status(200).json({
      success: true,
      message: 'Mua b√†i h·ªçc th√†nh c√¥ng',
      enrollment: {
        _id: enrollment._id,
        hasFullAccess: enrollment.hasFullAccess,
        purchasedLessons: enrollment.purchasedLessons
      }
    });

  } catch (error) {
    console.error("‚ùå Error in purchaseLesson:", error);
    res.status(500).json({ 
      message: 'L·ªói server khi mua b√†i h·ªçc',
      error: error.message 
    });
  }
};
/**
 * =====================
 *  CHECK LESSON ACCESS
 * =====================
 */
const checkLessonAccess = async (req, res) => {
  try {
    const { lessonId } = req.params;
    const studentId = new mongoose.Types.ObjectId(req.userId);

    console.log("üîê [checkLessonAccess]");
    console.log("‚û°Ô∏è StudentId:", studentId.toString());
    console.log("‚û°Ô∏è LessonId:", lessonId);

    // L·∫•y th√¥ng tin lesson ƒë·ªÉ bi·∫øt courseId
    const lesson = await Lesson.findById(lessonId);
    if (!lesson) {
      return res.status(404).json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y b√†i h·ªçc' 
      });
    }

    // T√¨m enrollment
    const enrollment = await Enrollment.findOne({
      studentId,
      courseId: lesson.courseId
    });

    let hasAccess = false;
    let accessType = 'none';

    if (enrollment) {
      if (enrollment.hasFullAccess) {
        hasAccess = true;
        accessType = 'full_course';
      } else if (enrollment.hasAccessToLesson(lessonId)) {
        hasAccess = true;
        accessType = 'single_lesson';
      }
    }

    console.log(`üîç Access check: ${hasAccess} (${accessType})`);

    res.json({
      success: true,
      hasAccess,
      accessType,
      lesson: {
        _id: lesson._id,
        title: lesson.title,
        meetingUrl: lesson.meetingUrl
      }
    });

  } catch (error) {
    console.error("‚ùå Error in checkLessonAccess:", error);
    res.status(500).json({ 
      success: false,
      message: 'L·ªói server khi ki·ªÉm tra quy·ªÅn truy c·∫≠p',
      error: error.message 
    });
  }
};

/**
 * =====================
 *  MARK LESSON COMPLETED
 * =====================
 */
const markLessonCompleted = async (req, res) => {
  try {
    const { lessonId } = req.params;
    const { progress = 100 } = req.body;
    const studentId = new mongoose.Types.ObjectId(req.userId);

    console.log("‚úÖ [markLessonCompleted]");
    console.log("‚û°Ô∏è StudentId:", studentId.toString());
    console.log("‚û°Ô∏è LessonId:", lessonId);
    console.log("‚û°Ô∏è Progress:", progress);

    // L·∫•y th√¥ng tin lesson ƒë·ªÉ bi·∫øt courseId
    const lesson = await Lesson.findById(lessonId);
    if (!lesson) {
      return res.status(404).json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y b√†i h·ªçc' 
      });
    }

    // T√¨m enrollment
    const enrollment = await Enrollment.findOne({
      studentId,
      courseId: lesson.courseId
    });

    if (!enrollment) {
      return res.status(404).json({ 
        success: false,
        message: 'B·∫°n ch∆∞a ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y' 
      });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p lesson
    if (!enrollment.hasAccessToLesson(lessonId)) {
      return res.status(403).json({ 
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p b√†i h·ªçc n√†y' 
      });
    }

    // ƒê√°nh d·∫•u ho√†n th√†nh
    await enrollment.markLessonCompleted(lessonId, progress);

    console.log("üìä Lesson marked as completed");

    res.json({
      success: true,
      message: 'ƒê√£ ƒë√°nh d·∫•u b√†i h·ªçc ho√†n th√†nh',
      progress: enrollment.progress.overallProgress,
      completedLessons: enrollment.progress.completedLessons.length
    });

  } catch (error) {
    console.error("‚ùå Error in markLessonCompleted:", error);
    res.status(500).json({ 
      success: false,
      message: 'L·ªói server khi ƒë√°nh d·∫•u b√†i h·ªçc ho√†n th√†nh',
      error: error.message 
    });
  }
};

/**
 * =====================
 *  GET ENROLLMENT PROGRESS
 * =====================
 */
const getEnrollmentProgress = async (req, res) => {
  try {
    const { enrollmentId } = req.params;
    const studentId = new mongoose.Types.ObjectId(req.userId);

    console.log("üìà [getEnrollmentProgress]");
    console.log("‚û°Ô∏è StudentId:", studentId.toString());
    console.log("‚û°Ô∏è EnrollmentId:", enrollmentId);

    const enrollment = await Enrollment.findOne({
      _id: enrollmentId,
      studentId
    }).populate('purchasedLessons.lessonId', 'title order')
      .populate('progress.completedLessons.lessonId', 'title order');

    if (!enrollment) {
      return res.status(404).json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y enrollment' 
      });
    }

    // L·∫•y t·ªïng s·ªë lesson trong course ƒë·ªÉ t√≠nh ph·∫ßn trƒÉm
    const totalLessons = await Lesson.countDocuments({ 
      courseId: enrollment.courseId 
    });

    const progressData = {
      overallProgress: enrollment.progress.overallProgress,
      completedLessons: enrollment.progress.completedLessons.length,
      totalLessons,
      purchasedLessons: enrollment.purchasedLessons.length,
      hasFullAccess: enrollment.hasFullAccess,
      lastAccessed: enrollment.progress.lastAccessed,
      completedLessonsDetails: enrollment.progress.completedLessons,
      purchasedLessonsDetails: enrollment.purchasedLessons
    };

    res.json({
      success: true,
      progress: progressData,
      enrollment: {
        _id: enrollment._id,
        status: enrollment.status,
        enrolledAt: enrollment.enrolledAt
      }
    });

  } catch (error) {
    console.error("‚ùå Error in getEnrollmentProgress:", error);
    res.status(500).json({ 
      success: false,
      message: 'L·ªói server khi l·∫•y ti·∫øn ƒë·ªô h·ªçc t·∫≠p',
      error: error.message 
    });
  }
};

/**
 * =====================
 *  GET ENROLLMENT BY COURSE
 * =====================
 */
const getEnrollmentByCourse = async (req, res) => {
  try {
    const { courseId } = req.params;
    const studentId = new mongoose.Types.ObjectId(req.userId);

    console.log("üìö [getEnrollmentByCourse]");
    console.log("‚û°Ô∏è StudentId:", studentId.toString());
    console.log("‚û°Ô∏è CourseId:", courseId);

    const enrollment = await Enrollment.findOne({
      studentId,
      courseId: new mongoose.Types.ObjectId(courseId)
    }).populate('courseId', 'title thumbnail instructor')
      .populate('purchasedLessons.lessonId', 'title order scheduleIndex');

    if (!enrollment) {
      return res.status(404).json({ 
        success: false,
        message: 'B·∫°n ch∆∞a ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y' 
      });
    }

    res.json({
      success: true,
      enrollment,
      accessInfo: {
        hasFullAccess: enrollment.hasFullAccess,
        purchasedLessonsCount: enrollment.purchasedLessons.length,
        canAccessAllLessons: enrollment.hasFullAccess
      }
    });

  } catch (error) {
    console.error("‚ùå Error in getEnrollmentByCourse:", error);
    res.status(500).json({ 
      success: false,
      message: 'L·ªói server khi l·∫•y th√¥ng tin enrollment',
      error: error.message 
    });
  }
};

/**
 * =====================
 *  UPDATE ENROLLMENT STATUS
 * =====================
 */
const updateEnrollmentStatus = async (req, res) => {
  try {
    const { enrollmentId } = req.params;
    const { status } = req.body;
    const studentId = new mongoose.Types.ObjectId(req.userId);

    console.log("üîÑ [updateEnrollmentStatus]");
    console.log("‚û°Ô∏è StudentId:", studentId.toString());
    console.log("‚û°Ô∏è EnrollmentId:", enrollmentId);
    console.log("‚û°Ô∏è New Status:", status);

    const validStatuses = ['active', 'completed', 'cancelled', 'paused'];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({ 
        success: false,
        message: `Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: ${validStatuses.join(', ')}` 
      });
    }

    const enrollment = await Enrollment.findOneAndUpdate(
      {
        _id: enrollmentId,
        studentId
      },
      {
        status,
        ...(status === 'completed' && { completedAt: new Date() })
      },
      { new: true }
    );

    if (!enrollment) {
      return res.status(404).json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y enrollment ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t' 
      });
    }

    console.log("‚úÖ Enrollment status updated");

    res.json({
      success: true,
      message: `C·∫≠p nh·∫≠t tr·∫°ng th√°i enrollment th√†nh ${status}`,
      enrollment: {
        _id: enrollment._id,
        status: enrollment.status,
        completedAt: enrollment.completedAt
      }
    });

  } catch (error) {
    console.error("‚ùå Error in updateEnrollmentStatus:", error);
    res.status(500).json({ 
      success: false,
      message: 'L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i enrollment',
      error: error.message 
    });
  }
};

/**
 * =====================
 *  GET COURSE ENROLLMENTS (FOR INSTRUCTOR)
 * =====================
 */
const getCourseEnrollments = async (req, res) => {
  try {
    const { courseId } = req.params;
    const { page = 1, limit = 10, status } = req.query;

    console.log("üë• [getCourseEnrollments]");
    console.log("‚û°Ô∏è CourseId:", courseId);
    console.log("‚û°Ô∏è Instructor:", req.userId);

    // Ki·ªÉm tra instructor c√≥ ph·∫£i l√† ng∆∞·ªùi d·∫°y kh√≥a h·ªçc n√†y kh√¥ng
    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' 
      });
    }

    if (course.instructor.toString() !== req.userId && req.userRole !== 'admin') {
      return res.status(403).json({ 
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch enrollment c·ªßa kh√≥a h·ªçc n√†y' 
      });
    }

    const query = { courseId: new mongoose.Types.ObjectId(courseId) };
    if (status) query.status = status;

    const enrollments = await Enrollment.find(query)
      .populate('studentId', 'fullName email profile.avatar')
      .sort({ enrolledAt: -1 })
      .limit(Number(limit))
      .skip((Number(page) - 1) * Number(limit))
      .lean();

    const total = await Enrollment.countDocuments(query);

    // Th·ªëng k√™
    const stats = {
      total: await Enrollment.countDocuments({ courseId }),
      active: await Enrollment.countDocuments({ courseId, status: 'active' }),
      completed: await Enrollment.countDocuments({ courseId, status: 'completed' }),
      cancelled: await Enrollment.countDocuments({ courseId, status: 'cancelled' })
    };

    console.log(`üìä Found ${total} enrollments for course ${courseId}`);

    res.json({
      success: true,
      enrollments,
      stats,
      pagination: {
        currentPage: Number(page),
        totalPages: Math.ceil(total / Number(limit)),
        totalEnrollments: total
      }
    });

  } catch (error) {
    console.error("‚ùå Error in getCourseEnrollments:", error);
    res.status(500).json({ 
      success: false,
      message: 'L·ªói server khi l·∫•y danh s√°ch enrollment kh√≥a h·ªçc',
      error: error.message 
    });
  }
};
const createEnrollment = async (req, res) => {
  try {
    const { courseId, paymentId } = req.body;
    const studentId = new mongoose.Types.ObjectId(req.userId);

    console.log("üéØ [createEnrollment]");
    console.log("‚û°Ô∏è StudentId (from token):", req.userId);
    console.log("‚û°Ô∏è StudentId (ObjectId):", studentId.toString());
    console.log("‚û°Ô∏è CourseId (body):", courseId);
    console.log("‚û°Ô∏è PaymentId (body):", paymentId);

    // Validate input
    if (!courseId || !paymentId) {
      console.log("‚ùå Missing input");
      return res.status(400).json({ 
        message: 'courseId v√† paymentId l√† b·∫Øt bu·ªôc' 
      });
    }

    // Ki·ªÉm tra course t·ªìn t·∫°i
    const course = await Course.findById(courseId);
    console.log("üìö Course found:", course ? course._id.toString() : null);
    if (!course) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
    }

    // Ki·ªÉm tra course ƒë√£ published ch∆∞a
    if (course.status !== 'published') {
      console.log("‚ö†Ô∏è Course not published:", course.status);
      return res.status(400).json({ message: 'Kh√≥a h·ªçc ch∆∞a ƒë∆∞·ª£c xu·∫•t b·∫£n' });
    }

    // Ki·ªÉm tra ƒë√£ ƒëƒÉng k√Ω ch∆∞a
    console.log("üîé Checking for existing enrollment...");
    const existingEnrollment = await Enrollment.findOne({
      studentId: new mongoose.Types.ObjectId(studentId),
      courseId: new mongoose.Types.ObjectId(courseId)
    });

    console.log("üìå Query ->", {
      studentId: studentId.toString(),
      courseId: courseId.toString()
    });
    console.log("üìå existingEnrollment:", existingEnrollment ? existingEnrollment._id.toString() : null);

    if (existingEnrollment) {
      return res.status(400).json({ message: 'B·∫°n ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y r·ªìi' });
    }

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng
    console.log(`üë• CurrentEnrollments: ${course.currentEnrollments} / ${course.maxStudents}`);
    if (course.currentEnrollments >= course.maxStudents) {
      return res.status(400).json({ message: 'Kh√≥a h·ªçc ƒë√£ ƒë·∫ßy' });
    }

    // T·∫°o enrollment m·ªõi
    const enrollment = new Enrollment({
      studentId,
      courseId: new mongoose.Types.ObjectId(courseId),
      paymentId: new mongoose.Types.ObjectId(paymentId),
      enrolledAt: new Date(),
      status: 'active'
    });

    await enrollment.save();
    console.log("‚úÖ Enrollment created:", enrollment._id.toString());

    // Update course count
    course.currentEnrollments += 1;
    await course.save();
    console.log("üìà Course enrollment count updated:", course.currentEnrollments);

    return res.status(201).json({
      success: true,
      message: 'ƒêƒÉng k√Ω kh√≥a h·ªçc th√†nh c√¥ng',
      enrollment
    });

  } catch (error) {
    console.error("‚ùå Error in createEnrollment:", error);

    if (error.code === 11000) {
      return res.status(400).json({ message: 'B·∫°n ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y r·ªìi' });
    }

    return res.status(500).json({ 
      message: 'L·ªói server khi ƒëƒÉng k√Ω kh√≥a h·ªçc',
      error: error.message 
    });
  }
};

/**
 * =====================
 *  GET MY ENROLLMENTS (LEGACY)
 * =====================
 */
const getMyEnrollments = async (req, res) => {
  try {
    const studentId = new mongoose.Types.ObjectId(req.userId);
    const { page = 1, limit = 10, status } = req.query;

    console.log("üìã [getMyEnrollments] for student:", studentId.toString());

    const query = { studentId };
    if (status) query.status = status;

    const enrollments = await Enrollment.find(query)
      .populate('courseId')
      .sort({ enrolledAt: -1 })
      .limit(Number(limit))
      .skip((Number(page) - 1) * Number(limit))
      .lean();

    const total = await Enrollment.countDocuments(query);
    console.log(`üìä Found ${total} enrollments`);

    res.json({
      success: true,
      enrollments,
      pagination: {
        currentPage: Number(page),
        totalPages: Math.ceil(total / Number(limit)),
        totalEnrollments: total
      }
    });

  } catch (error) {
    console.error("‚ùå Error in getMyEnrollments:", error);
    res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch ƒëƒÉng k√Ω', error: error.message });
  }
};

/**
 * =====================
 *  DELETE ENROLLMENT (LEGACY)
 * =====================
 */
const deleteEnrollment = async (req, res) => {
  try {
    const studentId = new mongoose.Types.ObjectId(req.userId);
    const enrollmentId = req.params.id;

    console.log("üóë [deleteEnrollment]");
    console.log("‚û°Ô∏è StudentId:", studentId.toString());
    console.log("‚û°Ô∏è EnrollmentId:", enrollmentId);

    const enrollment = await Enrollment.findOneAndDelete({
      _id: enrollmentId,
      studentId
    });

    console.log("üìå Deleted enrollment:", enrollment ? enrollment._id.toString() : null);

    if (!enrollment) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y enrollment ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn xo√°' });
    }

    await Course.findByIdAndUpdate(enrollment.courseId, {
      $inc: { currentEnrollments: -1 }
    });

    console.log("üìâ Course enrollment count decreased");

    res.json({ success: true, message: 'Xo√° enrollment th√†nh c√¥ng' });
  } catch (error) {
    console.error("‚ùå Error in deleteEnrollment:", error);
    res.status(500).json({ message: 'L·ªói server khi xo√° enrollment', error: error.message });
  }
};
const checkEnrollment = async (req, res) => {
  try {
    const { userId, courseId, lessonId } = req.query;

    console.log("üîç [checkEnrollment]");
    console.log("‚û°Ô∏è UserId:", userId);
    console.log("‚û°Ô∏è CourseId:", courseId);
    console.log("‚û°Ô∏è LessonId:", lessonId);

    // Validate input
    if (!userId) {
      return res.status(400).json({ 
        success: false,
        message: 'userId l√† b·∫Øt bu·ªôc' 
      });
    }

    if (!courseId && !lessonId) {
      return res.status(400).json({ 
        success: false,
        message: 'Ph·∫£i cung c·∫•p courseId ho·∫∑c lessonId' 
      });
    }

    try {
      const userObjectId = new mongoose.Types.ObjectId(userId);

      // T√¨m enrollment c·ªßa user cho course n√†y
      const enrollment = await Enrollment.findOne({
        studentId: userObjectId,
        courseId: courseId ? new mongoose.Types.ObjectId(courseId) : undefined
      });

      let isEnrolled = false;
      let enrollmentType = 'none';

      if (enrollment) {
        // N·∫øu lessonId ƒë∆∞·ª£c cung c·∫•p, ki·ªÉm tra xem user c√≥ mua lesson n√†y kh√¥ng
        if (lessonId) {
          if (enrollment.hasFullAccess) {
            isEnrolled = true;
            enrollmentType = 'full_course';
          } else if (enrollment.hasAccessToLesson(lessonId)) {
            isEnrolled = true;
            enrollmentType = 'single_lesson';
          }
        } else {
          // Ch·ªâ ki·ªÉm tra full course access
          isEnrolled = true;
          enrollmentType = enrollment.hasFullAccess ? 'full_course' : 'partial_course';
        }
      }

      console.log(`‚úÖ Enrollment check result: ${isEnrolled} (${enrollmentType})`);

      res.json({
        success: true,
        isEnrolled,
        enrollmentType, // 'none', 'full_course', 'single_lesson', 'partial_course'
        enrollment: isEnrolled ? {
          _id: enrollment._id.toString(),
          status: enrollment.status,
          enrolledAt: enrollment.enrolledAt,
          hasFullAccess: enrollment.hasFullAccess,
          purchasedLessonsCount: enrollment.purchasedLessons.length
        } : null
      });

    } catch (error) {
      if (error.kind === 'ObjectId') {
        return res.status(400).json({ 
          success: false,
          message: 'userId ho·∫∑c courseId kh√¥ng h·ª£p l·ªá' 
        });
      }
      throw error;
    }

  } catch (error) {
    console.error("‚ùå Error in checkEnrollment:", error);
    res.status(500).json({ 
      success: false,
      message: 'L·ªói server khi ki·ªÉm tra enrollment',
      error: error.message 
    });
  }
};
// C·∫≠p nh·∫≠t export ƒë·ªÉ bao g·ªìm t·∫•t c·∫£ c√°c h√†m
module.exports = {
  // C√°c h√†m m·ªõi
  purchaseLesson,
  checkLessonAccess,
  markLessonCompleted,
  getEnrollmentProgress,
  getEnrollmentByCourse,
  updateEnrollmentStatus,
  getCourseEnrollments,
  // C√°c h√†m c≈©
  createEnrollment,
  getMyEnrollments,
  deleteEnrollment,
  checkEnrollment
};