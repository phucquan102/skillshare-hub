const Course = require('../models/Course');
const Lesson = require('../models/Lesson');
const Enrollment = require('../models/Enrollment');
const mongoose = require('mongoose');
const axios = require('axios');
const redis = require('redis');
const client = redis.createClient({ url: process.env.REDIS_URL || 'redis://localhost:6379' });
client.connect();

const getInstructorInfo = async (userId) => {
  try {
    const userServiceUrl = process.env.USER_SERVICE_URL || 'http://user-service:3001';
    const response = await axios.get(`${userServiceUrl}/internal/${userId}`, { timeout: 5000 });
    const userData = response.data;

    return {
      _id: userData._id,
      fullName: userData.fullName || 'Unknown Name',
      email: userData.email || 'unknown@example.com',
      profile: userData.profile || { avatar: null, bio: null }
    };
  } catch (error) {
    console.error('Error fetching instructor info:', error.message);
    return {
      _id: userId,
      fullName: 'Unknown Instructor',
      email: 'unknown@example.com',
      profile: { avatar: null, bio: null }
    };
  }
};

const getMultipleInstructorInfo = async (userIds) => {
  try {
    const uniqueUserIds = [...new Set(userIds)];
    const userServiceUrl = process.env.USER_SERVICE_URL || 'http://user-service:3001';
    const response = await axios.post(`${userServiceUrl}/internal/batch`, { userIds: uniqueUserIds }, { timeout: 5000 });
    return response.data.users.map(user => ({
      _id: user._id,
      fullName: user.fullName,
      email: user.email,
      profile: user.profile || {}
    }));
  } catch (error) {
    console.error('Error fetching multiple instructors info:', error.message);
    return userIds.map(userId => ({
      _id: userId,
      fullName: 'Unknown Instructor',
      email: 'unknown@example.com',
      profile: { avatar: null, bio: null }
    }));
  }
};

const courseController = {
  createCourse: async (req, res) => {
    try {
      console.log('üéØ [createCourse] Started for user:', req.userId);
      console.log('üì¶ Request body:', req.body);

      const {
        title, description, shortDescription, category, subcategory, level,
        pricingType, fullCoursePrice, coInstructors, schedules,
        maxStudents, prerequisites, learningOutcomes, materialsIncluded,
        requirements, tags, language, thumbnail, promoVideo, gallery,
        discount, certificate, featured, startDate, endDate
      } = req.body;

      // Validate required fields
      if (!title || !description || !category || !pricingType || !startDate || !endDate) {
        console.log('‚ùå Missing required fields');
        return res.status(400).json({ 
          message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc',
          required: ['title', 'description', 'category', 'pricingType', 'startDate', 'endDate']
        });
      }

      // üéØ S·ª¨A: Validate schedules v·ªõi date
      if (!schedules || !Array.isArray(schedules) || schedules.length === 0) {
        return res.status(400).json({ 
          message: 'Danh s√°ch l·ªãch h·ªçc l√† b·∫Øt bu·ªôc',
          required: 'schedules (array of {date, startTime, endTime})'
        });
      }

      // Validate t·ª´ng schedule
      for (let i = 0; i < schedules.length; i++) {
        const schedule = schedules[i];
        if (!schedule.date || !schedule.startTime || !schedule.endTime) {
          return res.status(400).json({ 
            message: `Schedule ${i+1} thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: date, startTime, endTime`
          });
        }
        
        // Validate date format
        const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
        if (!dateRegex.test(schedule.date)) {
          return res.status(400).json({ 
            message: `Schedule ${i+1} c√≥ ƒë·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá (YYYY-MM-DD)`
          });
        }

        // Validate time format
        const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
        if (!timeRegex.test(schedule.startTime) || !timeRegex.test(schedule.endTime)) {
          return res.status(400).json({ 
            message: `Schedule ${i+1} c√≥ ƒë·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá (HH:mm)`
          });
        }

        // Validate date kh√¥ng ƒë∆∞·ª£c trong qu√° kh·ª©
        const scheduleDate = new Date(schedule.date);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        if (scheduleDate < today) {
          return res.status(400).json({ 
            message: `Schedule ${i+1} c√≥ ng√†y trong qu√° kh·ª©`
          });
        }

        // Validate date n·∫±m trong kho·∫£ng startDate v√† endDate c·ªßa kh√≥a h·ªçc
        const courseStartDate = new Date(startDate);
        const courseEndDate = new Date(endDate);
        if (scheduleDate < courseStartDate || scheduleDate > courseEndDate) {
          return res.status(400).json({ 
            message: `Schedule ${i+1} c√≥ ng√†y kh√¥ng n·∫±m trong th·ªùi gian kh√≥a h·ªçc (${startDate} ƒë·∫øn ${endDate})`
          });
        }

        // Validate time logic
        const start = new Date(`${schedule.date}T${schedule.startTime}`);
        const end = new Date(`${schedule.date}T${schedule.endTime}`);
        if (isNaN(start) || isNaN(end) || start >= end) {
          return res.status(400).json({ 
            message: `Schedule ${i+1} c√≥ th·ªùi gian kh√¥ng h·ª£p l·ªá (endTime ph·∫£i sau startTime)`
          });
        }

        // Ki·ªÉm tra tr√πng l·ªãch
        for (let j = 0; j < i; j++) {
          const otherSchedule = schedules[j];
          if (schedule.date === otherSchedule.date && 
              schedule.startTime === otherSchedule.startTime) {
            return res.status(400).json({ 
              message: `Schedule ${i+1} b·ªã tr√πng l·ªãch v·ªõi schedule ${j+1}`
            });
          }
        }
      }

      if (req.userRole !== 'instructor' && req.userRole !== 'admin') {
        return res.status(403).json({ message: 'Ch·ªâ gi·∫£ng vi√™n m·ªõi c√≥ th·ªÉ t·∫°o kh√≥a h·ªçc' });
      }

      // Validate pricing
      if (pricingType === 'full_course' && (!fullCoursePrice && fullCoursePrice !== 0)) {
        return res.status(400).json({ message: 'Gi√° kh√≥a h·ªçc l√† b·∫Øt bu·ªôc khi ch·ªçn thanh to√°n tr·ªçn kh√≥a' });
      }

      // Validate dates
      const start = new Date(startDate);
      const end = new Date(endDate);
      if (isNaN(start) || isNaN(end) || start >= end) {
        return res.status(400).json({ message: 'Ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c kh√¥ng h·ª£p l·ªá' });
      }

      console.log('‚úÖ Validation passed, creating course...');

      // üéØ S·ª¨A: Chu·∫©n b·ªã schedules v·ªõi date v√† dayOfWeek
      const processedSchedules = schedules.map(schedule => {
        const scheduleDate = new Date(schedule.date);
        const dayOfWeek = scheduleDate.getDay(); // 0 = Ch·ªß nh·∫≠t, 1 = Th·ª© 2, ...
        
        return {
          date: schedule.date,
          dayOfWeek: dayOfWeek,
          startTime: schedule.startTime,
          endTime: schedule.endTime,
          timezone: schedule.timezone || 'Asia/Ho_Chi_Minh',
          meetingPlatform: schedule.meetingPlatform || 'zoom',
          isActive: true,
          hasLesson: false
        };
      });

      const course = new Course({
        title, description, shortDescription, category, subcategory, level,
        pricingType, fullCoursePrice, coInstructors: coInstructors || [],
        schedules: processedSchedules,
        maxStudents, prerequisites: prerequisites || [],
        learningOutcomes: learningOutcomes || [], materialsIncluded: materialsIncluded || [],
        requirements: requirements || [], tags: tags || [], 
        language: language || 'vi',  
        thumbnail, promoVideo, gallery: gallery || [], discount, certificate, featured,
        startDate, endDate,
        instructor: req.userId, 
        status: 'draft', 
        approvalStatus: { status: 'pending' }
      });

      await course.save();
      console.log('‚úÖ Course created successfully:', course._id);

      // Populate instructor info
      const instructorInfo = await getInstructorInfo(req.userId);
      const courseWithInstructor = {
        ...course.toObject(),
        instructor: {
          _id: instructorInfo._id,
          fullName: instructorInfo.fullName,
          email: instructorInfo.email,
          profile: { avatar: instructorInfo.profile?.avatar }
        }
      };

      res.status(201).json({
        message: 'T·∫°o kh√≥a h·ªçc th√†nh c√¥ng',
        course: courseWithInstructor
      });
    } catch (error) {
      console.error('‚ùå [createCourse] Error:', {
        message: error.message,
        stack: error.stack,
        userId: req.userId
      });
      
      // Handle specific errors
      if (error.name === 'ValidationError') {
        return res.status(400).json({ 
          message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          errors: Object.values(error.errors).map(e => e.message)
        });
      }
      
      if (error.code === 11000) {
        return res.status(400).json({ message: 'Kh√≥a h·ªçc v·ªõi ti√™u ƒë·ªÅ n√†y ƒë√£ t·ªìn t·∫°i' });
      }

      res.status(500).json({ 
        message: 'L·ªói server khi t·∫°o kh√≥a h·ªçc',
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  },

  updateCourseStatus: async (req, res) => {
    try {
      const { courseId } = req.params;
      const { status } = req.body;

      if (!['draft', 'pending_review', 'archived'].includes(status)) {
        return res.status(400).json({ message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá' });
      }

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi tr·∫°ng th√°i kh√≥a h·ªçc n√†y' });
      }

      course.status = status;
      course.isActive = status === 'published';
      course.approvalStatus = status === 'pending_review' ? { status: 'pending' } : course.approvalStatus;
      await course.save();

      res.json({
        message: `Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c ${status === 'pending_review' ? 'submit ƒë·ªÉ duy·ªát' : status === 'draft' ? 'chuy·ªÉn v·ªÅ nh√°p' : 'l∆∞u tr·ªØ'}`,
        course: { id: course._id, title: course.title, status: course.status, isActive: course.isActive }
      });
    } catch (error) {
      console.error('Update course status error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  createLesson: async (req, res) => {
    try {
      const { courseId } = req.params;
      const {
        title, description, shortDescription, order, duration,
        scheduleId, lessonType, meetingPlatform, price, isPreview, isFree,
        objectives, prerequisites, difficulty, estimatedStudyTime,
        actualStartTime, actualEndTime, maxParticipants, registrationDeadline
      } = req.body;

      console.log('üìö [createLesson] Creating lesson for course:', courseId);
      console.log('üì¶ [createLesson] Lesson data:', req.body);

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m b√†i h·ªçc' });
      }

      // üéØ S·ª¨A: T√¨m schedule b·∫±ng scheduleId thay v√¨ scheduleIndex
      const targetSchedule = course.schedules.id(scheduleId);
      if (!targetSchedule) {
        return res.status(400).json({ 
          message: 'Schedule kh√¥ng t·ªìn t·∫°i',
          availableSchedules: course.schedules.map(s => ({
            _id: s._id,
            date: s.date,
            dayOfWeek: s.dayOfWeek,
            startTime: s.startTime,
            endTime: s.endTime,
            hasLesson: s.hasLesson,
            isActive: s.isActive
          }))
        });
      }

      // üéØ KI·ªÇM TRA: Schedule ƒë√£ c√≥ lesson ch∆∞a
      if (targetSchedule.hasLesson) {
        return res.status(400).json({ 
          message: 'Schedule n√†y ƒë√£ c√≥ b√†i h·ªçc. M·ªói schedule ch·ªâ ƒë∆∞·ª£c c√≥ m·ªôt b√†i h·ªçc.',
          existingLessonId: targetSchedule.lessonId
        });
      }

      // üéØ KI·ªÇM TRA: Schedule c√≥ active kh√¥ng
      if (!targetSchedule.isActive) {
        return res.status(400).json({ 
          message: 'Schedule n√†y kh√¥ng active. Kh√¥ng th·ªÉ t·∫°o b√†i h·ªçc.'
        });
      }

      // VALIDATION: Ki·ªÉm tra required fields
      if (!title || !description || order === undefined || !duration || !lessonType) {
        return res.status(400).json({ 
          message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc',
          required: ['title', 'description', 'order', 'duration', 'lessonType']
        });
      }

      // üéØ CHO PH√âP TH√äM B√ÄI H·ªåC V√ÄO KH√ìA H·ªåC ƒêANG CH·ªú DUY·ªÜT
      if (course.status === 'rejected') {
        return res.status(400).json({ message: 'Kh√¥ng th·ªÉ th√™m b√†i h·ªçc v√†o kh√≥a h·ªçc ƒë√£ b·ªã t·ª´ ch·ªëi' });
      }

      console.log('‚úÖ Validation passed, creating lesson...');

      const lesson = new Lesson({
        courseId,
        title,
        description,
        shortDescription,
        order,
        duration,
        scheduleId: scheduleId,
        lessonType,
        meetingPlatform: meetingPlatform || targetSchedule.meetingPlatform || 'none',
        price: price || 0,
        isPreview: isPreview || false,
        isFree: isFree || false,
        objectives: objectives || [],
        prerequisites: prerequisites || [],
        difficulty: difficulty || 'medium',
        estimatedStudyTime: estimatedStudyTime || duration,
        maxParticipants: maxParticipants || course.maxStudents,
        registrationDeadline,
        status: 'draft'
      });

      await lesson.save();
      console.log('‚úÖ Lesson created successfully:', lesson._id);

      // üéØ QUAN TR·ªåNG: C·∫≠p nh·∫≠t schedule v·ªõi lesson info
      targetSchedule.hasLesson = true;
      targetSchedule.lessonId = lesson._id;
      
      // C·∫≠p nh·∫≠t course lessons array
      if (!course.lessons) {
        course.lessons = [];
      }
      course.lessons.push(lesson._id);
      
      // C·∫≠p nh·∫≠t metadata
      course.metadata.schedulesWithLessons = course.schedules.filter(s => s.hasLesson).length;
      course.metadata.completionRate = course.scheduleCompletionRate;
      
      await course.save();

      const dayNames = ['Ch·ªß nh·∫≠t', 'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'];

      res.status(201).json({ 
        success: true,
        message: 'T·∫°o b√†i h·ªçc th√†nh c√¥ng', 
        lesson,
        schedule: {
          _id: targetSchedule._id,
          date: targetSchedule.date,
          dayOfWeek: targetSchedule.dayOfWeek,
          dayName: dayNames[targetSchedule.dayOfWeek],
          startTime: targetSchedule.startTime,
          endTime: targetSchedule.endTime,
          timezone: targetSchedule.timezone
        }
      });

    } catch (error) {
      console.error('‚ùå [createLesson] Error:', error);
      
      if (error.name === 'ValidationError') {
        return res.status(400).json({ 
          success: false,
          message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          errors: Object.values(error.errors).map(e => e.message)
        });
      }
      
      res.status(500).json({ 
        success: false,
        message: 'L·ªói server khi t·∫°o b√†i h·ªçc',
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  },

  updateLesson: async (req, res) => {
    try {
      const { lessonId } = req.params;
      const updateData = req.body;

      if (!mongoose.Types.ObjectId.isValid(lessonId)) {
        return res.status(400).json({ message: 'ID b√†i h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const lesson = await Lesson.findById(lessonId);
      if (!lesson) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i h·ªçc' });
      }

      const course = await Course.findById(lesson.courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a b√†i h·ªçc' });
      }

      // üéØ CH·∫∂N: Kh√¥ng cho ph√©p thay ƒë·ªïi scheduleId sau khi ƒë√£ t·∫°o
      if (updateData.scheduleId !== undefined && updateData.scheduleId !== lesson.scheduleId) {
        return res.status(400).json({ 
          message: 'Kh√¥ng th·ªÉ thay ƒë·ªïi schedule c·ªßa b√†i h·ªçc. Vui l√≤ng x√≥a v√† t·∫°o l·∫°i b√†i h·ªçc v·ªõi schedule m·ªõi.' 
        });
      }

      // üéØ CHO PH√âP C·∫¨P NH·∫¨T B√ÄI H·ªåC TRONG KH√ìA H·ªåC ƒêANG CH·ªú DUY·ªÜT
      if (course.status === 'rejected') {
        return res.status(400).json({ message: 'Kh√¥ng th·ªÉ ch·ªânh s·ª≠a b√†i h·ªçc trong kh√≥a h·ªçc ƒë√£ b·ªã t·ª´ ch·ªëi' });
      }

      const updatedLesson = await Lesson.findByIdAndUpdate(
        lessonId,
        { ...updateData },
        { new: true, runValidators: true }
      );

      res.json({ 
        success: true,
        message: 'C·∫≠p nh·∫≠t b√†i h·ªçc th√†nh c√¥ng', 
        lesson: updatedLesson 
      });
    } catch (error) {
      console.error('Update lesson error:', error);
      res.status(500).json({ 
        success: false,
        message: 'L·ªói server', 
        error: error.message 
      });
    }
  },

  deleteLesson: async (req, res) => {
    try {
      const { lessonId } = req.params;

      if (!mongoose.Types.ObjectId.isValid(lessonId)) {
        return res.status(400).json({ message: 'ID b√†i h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const lesson = await Lesson.findById(lessonId);
      if (!lesson) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i h·ªçc' });
      }

      const course = await Course.findById(lesson.courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a b√†i h·ªçc' });
      }

      // üéØ QUAN TR·ªåNG: C·∫≠p nh·∫≠t schedule tr∆∞·ªõc khi x√≥a lesson
      const targetSchedule = course.schedules.id(lesson.scheduleId);
      if (targetSchedule) {
        targetSchedule.hasLesson = false;
        targetSchedule.lessonId = null;
        
        // C·∫≠p nh·∫≠t metadata
        course.metadata.schedulesWithLessons = course.schedules.filter(s => s.hasLesson).length;
        course.metadata.completionRate = course.scheduleCompletionRate;
      }

      await Lesson.findByIdAndDelete(lessonId);
      course.lessons.pull(lessonId);
      await course.save();

      res.json({ 
        success: true,
        message: 'X√≥a b√†i h·ªçc th√†nh c√¥ng', 
        lessonId 
      });
    } catch (error) {
      console.error('Delete lesson error:', error);
      res.status(500).json({ 
        success: false,
        message: 'L·ªói server', 
        error: error.message 
      });
    }
  },

  // üéØ S·ª¨A: API ƒë·ªÉ l·∫•y danh s√°ch schedules available
  getAvailableSchedules: async (req, res) => {
    try {
      const { courseId } = req.params;

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId).select('schedules title');
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      // Ch·ªâ instructor v√† admin m·ªõi ƒë∆∞·ª£c xem
      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem schedules' });
      }

      const dayNames = ['Ch·ªß nh·∫≠t', 'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'];

      const availableSchedules = course.schedules.map(schedule => {
        // T√≠nh th·ªùi l∆∞·ª£ng
        let duration = '';
        if (schedule.startTime && schedule.endTime) {
          const start = new Date(`2000-01-01T${schedule.startTime}`);
          const end = new Date(`2000-01-01T${schedule.endTime}`);
          const diffMs = end.getTime() - start.getTime();
          const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
          const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
          
          if (diffHours > 0) {
            duration = `${diffHours} gi·ªù ${diffMinutes > 0 ? `${diffMinutes} ph√∫t` : ''}`;
          } else {
            duration = `${diffMinutes} ph√∫t`;
          }
        }

        return {
          _id: schedule._id,
          date: schedule.date,
          dayOfWeek: schedule.dayOfWeek,
          dayName: dayNames[schedule.dayOfWeek],
          startTime: schedule.startTime,
          endTime: schedule.endTime,
          duration: duration,
          timezone: schedule.timezone,
          meetingPlatform: schedule.meetingPlatform,
          hasLesson: schedule.hasLesson,
          isAvailable: !schedule.hasLesson && schedule.isActive
        };
      });

      res.json({
        success: true,
        course: { _id: course._id, title: course.title },
        schedules: availableSchedules,
        availableCount: availableSchedules.filter(s => s.isAvailable).length,
        totalCount: availableSchedules.length
      });
    } catch (error) {
      console.error('Get available schedules error:', error);
      res.status(500).json({ 
        success: false,
        message: 'L·ªói server', 
        error: error.message 
      });
    }
  },

  getPendingCourses: async (req, res) => {
    try {
      const { page = 1, limit = 10 } = req.query;

      const filter = { status: 'pending_review' };
      const courses = await Course.find(filter)
        .populate('lessons')
        .sort({ createdAt: -1 })
        .limit(Number(limit))
        .skip((Number(page) - 1) * Number(limit))
        .lean();

      const total = await Course.countDocuments(filter);

      const instructorIds = courses.map(course => course.instructor);
      const instructorsInfo = await getMultipleInstructorInfo(instructorIds);

      const instructorsMap = {};
      instructorsInfo.forEach(instructor => {
        instructorsMap[instructor._id] = instructor;
      });

      const coursesWithInstructors = courses.map(course => ({
        ...course,
        instructor: instructorsMap[course.instructor] || {
          _id: course.instructor,
          fullName: 'Unknown Instructor',
          email: 'unknown@example.com',
          profile: { avatar: null, bio: null }
        },
        availableSpots: course.maxStudents - course.currentEnrollments
      }));

      res.json({
        courses: coursesWithInstructors,
        pagination: {
          currentPage: Number(page),
          totalPages: Math.ceil(total / Number(limit)),
          totalCourses: total
        }
      });
    } catch (error) {
      console.error('Get pending courses error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  approveCourse: async (req, res) => {
    try {
      const { courseId } = req.params;

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (course.status !== 'pending_review') {
        return res.status(400).json({ message: 'Kh√≥a h·ªçc kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù duy·ªát' });
      }

      course.status = 'published';
      course.isActive = true;
      course.approvalStatus = { status: 'approved' };
      await course.save();

      res.json({ message: 'Ph√™ duy·ªát kh√≥a h·ªçc th√†nh c√¥ng', courseId });
    } catch (error) {
      console.error('Approve course error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  getLessonById: async (req, res) => {
    try {
      const { lessonId } = req.params;

      if (!mongoose.Types.ObjectId.isValid(lessonId)) {
        return res.status(400).json({ message: 'ID b√†i h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const lesson = await Lesson.findById(lessonId).lean();
      if (!lesson) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i h·ªçc' });
      }

      const course = await Course.findById(lesson.courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      // Ch·ªâ admin, instructor c·ªßa kh√≥a h·ªçc, ho·∫∑c student ƒë√£ ƒëƒÉng k√Ω m·ªõi c√≥ quy·ªÅn xem
      const enrollment = await Enrollment.findOne({ userId: req.userId, courseId: lesson.courseId });
      if (req.userRole !== 'admin' && 
          course.instructor.toString() !== req.userId && 
          !enrollment && 
          !lesson.isPreview) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem b√†i h·ªçc n√†y' });
      }

      // üéØ TH√äM: L·∫•y th√¥ng tin schedule
      const schedule = course.schedules.id(lesson.scheduleId);
      const dayNames = ['Ch·ªß nh·∫≠t', 'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'];
      
      const lessonWithSchedule = {
        ...lesson,
        schedule: schedule ? {
          _id: schedule._id,
          date: schedule.date,
          dayOfWeek: schedule.dayOfWeek,
          dayName: dayNames[schedule.dayOfWeek],
          startTime: schedule.startTime,
          endTime: schedule.endTime,
          timezone: schedule.timezone
        } : null
      };

      res.json({ lesson: lessonWithSchedule });
    } catch (error) {
      console.error('Get lesson by ID error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  getLessonsByCourse: async (req, res) => {
    try {
      const { courseId } = req.params;
      const { page = 1, limit = 10 } = req.query;

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      // Ch·ªâ admin, instructor, ho·∫∑c student ƒë√£ ƒëƒÉng k√Ω m·ªõi c√≥ quy·ªÅn xem
      const enrollment = await Enrollment.findOne({ userId: req.userId, courseId });
      if (req.userRole !== 'admin' && 
          course.instructor.toString() !== req.userId && 
          !enrollment) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch b√†i h·ªçc' });
      }

      const lessons = await Lesson.find({ courseId })
        .sort({ order: 1 })
        .limit(Number(limit))
        .skip((Number(page) - 1) * Number(limit))
        .lean();

      const dayNames = ['Ch·ªß nh·∫≠t', 'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'];

      // üéØ TH√äM: L·∫•y th√¥ng tin schedule cho m·ªói lesson
      const lessonsWithSchedule = lessons.map(lesson => {
        const schedule = course.schedules.id(lesson.scheduleId);
        return {
          ...lesson,
          schedule: schedule ? {
            _id: schedule._id,
            date: schedule.date,
            dayOfWeek: schedule.dayOfWeek,
            dayName: dayNames[schedule.dayOfWeek],
            startTime: schedule.startTime,
            endTime: schedule.endTime,
            timezone: schedule.timezone
          } : null
        };
      });

      const total = await Lesson.countDocuments({ courseId });

      res.json({
        lessons: lessonsWithSchedule,
        pagination: {
          currentPage: Number(page),
          totalPages: Math.ceil(total / Number(limit)),
          totalLessons: total
        }
      });
    } catch (error) {
      console.error('Get lessons by course error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  rejectCourse: async (req, res) => {
    try {
      const { courseId } = req.params;
      const { reason } = req.body;

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      if (!reason) {
        return res.status(400).json({ message: 'L√Ω do t·ª´ ch·ªëi l√† b·∫Øt bu·ªôc' });
      }

      const course = await Course.findById(courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (course.status !== 'pending_review') {
        return res.status(400).json({ message: 'Kh√≥a h·ªçc kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù duy·ªát' });
      }

      course.status = 'rejected';
      course.isActive = false;
      course.approvalStatus = { status: 'rejected', reason };
      await course.save();

      res.json({ message: 'T·ª´ ch·ªëi kh√≥a h·ªçc th√†nh c√¥ng', courseId });
    } catch (error) {
      console.error('Reject course error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  getCourses: async (req, res) => {
    try {
      const {
        page = 1, limit = 10, search, category, subcategory, level,
        pricingType, minPrice, maxPrice, status = 'published', sortBy = 'createdAt', sortOrder = 'desc'
      } = req.query;

      const filter = { status };
      if (search) {
        filter.$or = [
          { title: { $regex: search, $options: 'i' } },
          { description: { $regex: search, $options: 'i' } }
        ];
      }
      if (category) filter.category = category;
      if (subcategory) filter.subcategory = subcategory;
      if (level) filter.level = level;
      if (pricingType) filter.pricingType = pricingType;
      if (minPrice || maxPrice) {
        filter.fullCoursePrice = {};
        if (minPrice) filter.fullCoursePrice.$gte = Number(minPrice);
        if (maxPrice) filter.fullCoursePrice.$lte = Number(maxPrice);
      }

      const sortOptions = {};
      sortOptions[sortBy] = sortOrder === 'desc' ? -1 : 1;

      const courses = await Course.find(filter)
        .populate('lessons')
        .sort(sortOptions)
        .limit(Number(limit))
        .skip((Number(page) - 1) * Number(limit))
        .lean();

      const total = await Course.countDocuments(filter);

      const instructorIds = courses.map(course => course.instructor);
      const instructorsInfo = await getMultipleInstructorInfo(instructorIds);

      const instructorsMap = {};
      instructorsInfo.forEach(instructor => {
        instructorsMap[instructor._id] = instructor;
      });

      const coursesWithInstructors = courses.map(course => ({
        ...course,
        instructor: instructorsMap[course.instructor] || {
          _id: course.instructor,
          fullName: 'Unknown Instructor',
          email: 'unknown@example.com',
          profile: { avatar: null, bio: null }
        },
        availableSpots: course.maxStudents - course.currentEnrollments
      }));

      res.json({
        courses: coursesWithInstructors,
        pagination: {
          currentPage: Number(page),
          totalPages: Math.ceil(total / Number(limit)),
          totalCourses: total,
          hasNext: Number(page) < Math.ceil(total / Number(limit)),
          hasPrev: Number(page) > 1
        }
      });
    } catch (error) {
      console.error('Get courses error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  getCourseById: async (req, res) => {
    try {
      const { courseId } = req.params;

      console.log('üîç [getCourseById] Fetching course:', courseId);
      console.log('üîç Request from user:', req.userId || 'public', 'role:', req.userRole || 'public');

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId).populate('lessons').lean();
      if (!course) {
        console.log('‚ö†Ô∏è Course not found in DB:', courseId);
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      console.log('üìö Course found:', {
        _id: course._id,
        title: course.title,
        instructor: course.instructor,
        status: course.status
      });

      const instructorId = course.instructor?._id || course.instructor;
      const instructorInfo = await getInstructorInfo(instructorId);

      console.log('üë§ Instructor info fetched:', {
        _id: instructorInfo._id,
        fullName: instructorInfo.fullName
      });

      const courseWithInstructor = {
        ...course,
        instructor: {
          _id: instructorInfo._id,
          fullName: instructorInfo.fullName,
          email: instructorInfo.email,
          profile: instructorInfo.profile
        },
        availableSpots: course.maxStudents - course.currentEnrollments
      };

      console.log('‚úÖ Returning course with instructor');
      res.json({ course: courseWithInstructor });
    } catch (error) {
      console.error('‚ùå Get course by ID error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  updateCourse: async (req, res) => {
    try {
      const { courseId } = req.params;
      const updateData = req.body;

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n ch·ªâ c√≥ th·ªÉ ch·ªânh s·ª≠a kh√≥a h·ªçc c·ªßa m√¨nh' });
      }

      // üéØ CH·∫∂N: Kh√¥ng cho ph√©p c·∫≠p nh·∫≠t schedules n·∫øu ƒë√£ c√≥ lessons
      if (updateData.schedules && Array.isArray(updateData.schedules)) {
        const existingLessons = await Lesson.find({ courseId });
        if (existingLessons.length > 0) {
          return res.status(400).json({ 
            message: 'Kh√¥ng th·ªÉ thay ƒë·ªïi schedules khi ƒë√£ c√≥ b√†i h·ªçc. Vui l√≤ng x√≥a t·∫•t c·∫£ b√†i h·ªçc tr∆∞·ªõc.' 
          });
        }
      }

      // üéØ S·ª¨A: X·ª≠ l√Ω schedules n·∫øu c√≥
      if (updateData.schedules && Array.isArray(updateData.schedules)) {
        updateData.schedules = updateData.schedules.map(schedule => {
          const scheduleDate = new Date(schedule.date);
          const dayOfWeek = scheduleDate.getDay();
          
          return {
            ...schedule,
            dayOfWeek: dayOfWeek,
            timezone: schedule.timezone || 'Asia/Ho_Chi_Minh',
            meetingPlatform: schedule.meetingPlatform || 'zoom',
            isActive: true,
            hasLesson: false
          };
        });
      }

      delete updateData.instructor;
      delete updateData.currentEnrollments;
      delete updateData.ratings;

      const updatedCourse = await Course.findByIdAndUpdate(
        courseId,
        { ...updateData },
        { new: true, runValidators: true }
      ).populate('lessons');

      const instructorInfo = await getInstructorInfo(updatedCourse.instructor);
      const courseWithInstructor = {
        ...updatedCourse.toObject(),
        instructor: {
          _id: instructorInfo._id,
          fullName: instructorInfo.fullName,
          email: instructorInfo.email,
          profile: { avatar: instructorInfo.profile?.avatar }
        }
      };

      res.json({
        message: 'C·∫≠p nh·∫≠t kh√≥a h·ªçc th√†nh c√¥ng',
        course: courseWithInstructor
      });
    } catch (error) {
      console.error('Update course error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  deleteCourse: async (req, res) => {
    try {
      const { courseId } = req.params;

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (course.status === 'draft') {
        await Course.findByIdAndDelete(courseId);
        await Lesson.deleteMany({ courseId });
        return res.json({
          message: 'X√≥a kh√≥a h·ªçc nh√°p th√†nh c√¥ng',
          courseId,
          permanentlyDeleted: true
        });
      }

      // ‚úÖ ADMIN: C√ì TH·ªÇ XO√Å HO√ÄN TO√ÄN B·∫§T K·ª≤ COURSE N√ÄY KH√îNG C√ì H·ªåC VI√äN
      if (req.userRole === 'admin') {
        if (course.currentEnrollments > 0) {
          return res.status(400).json({ 
            message: 'Kh√¥ng th·ªÉ x√≥a kh√≥a h·ªçc ƒëang c√≥ h·ªçc vi√™n ƒëƒÉng k√Ω' 
          });
        }
        
        // ‚úÖ XO√Å HO√ÄN TO√ÄN
        await Course.findByIdAndDelete(courseId);
        await Lesson.deleteMany({ courseId });
        
        return res.json({
          message: 'X√≥a kh√≥a h·ªçc th√†nh c√¥ng',
          courseId,
          permanentlyDeleted: true
        });
      }

      // ‚ùå INSTRUCTOR LOGIC (gi·ªØ nguy√™n)
      if (course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n ch·ªâ c√≥ th·ªÉ x√≥a kh√≥a h·ªçc c·ªßa m√¨nh' });
      }

      if (course.currentEnrollments > 0) {
        return res.status(400).json({ message: 'Kh√¥ng th·ªÉ x√≥a kh√≥a h·ªçc ƒëang c√≥ h·ªçc vi√™n ƒëƒÉng k√Ω' });
      }

      // Instructor ch·ªâ ƒë∆∞·ª£c archive
      course.status = 'archived';
      course.isActive = false;
      await course.save();
      await Lesson.updateMany({ courseId }, { status: 'archived' });

      res.json({
        message: 'ƒê√£ l∆∞u tr·ªØ kh√≥a h·ªçc th√†nh c√¥ng',
        courseId,
        permanentlyDeleted: false
      });
    } catch (error) {
      console.error('Delete course error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  getMyCourses: async (req, res) => {
    try {
      const { page = 1, limit = 10, status } = req.query;

      const filter = { 
        instructor: req.userId,
        status: { $ne: 'archived' }  
      };
      
      if (status && status !== 'all') {
        filter.status = status;
      }

      const courses = await Course.find(filter)
        .populate('lessons')
        .sort({ updatedAt: -1 })
        .limit(Number(limit))
        .skip((Number(page) - 1) * Number(limit))
        .lean();

      const total = await Course.countDocuments(filter);

      const coursesWithStats = courses.map(course => ({
        ...course,
        availableSpots: course.maxStudents - course.currentEnrollments
      }));

      res.json({
        courses: coursesWithStats,
        pagination: {
          currentPage: Number(page),
          totalPages: Math.ceil(total / Number(limit)),
          totalCourses: total
        }
      });
    } catch (error) {
      console.error('Get my courses error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  // method editCourse cho instructor
  editCourse: async (req, res) => {
    try {
      const { courseId } = req.params;
      const updateData = req.body;

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      // Ki·ªÉm tra quy·ªÅn: ch·ªâ instructor c·ªßa course ho·∫∑c admin ƒë∆∞·ª£c ph√©p edit
      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n ch·ªâ c√≥ th·ªÉ ch·ªânh s·ª≠a kh√≥a h·ªçc c·ªßa m√¨nh' });
      }

      // üéØ CH·∫∂N: Kh√¥ng cho ph√©p c·∫≠p nh·∫≠t schedules n·∫øu ƒë√£ c√≥ lessons
      if (updateData.schedules && Array.isArray(updateData.schedules)) {
        const existingLessons = await Lesson.find({ courseId });
        if (existingLessons.length > 0) {
          return res.status(400).json({ 
            message: 'Kh√¥ng th·ªÉ thay ƒë·ªïi schedules khi ƒë√£ c√≥ b√†i h·ªçc. Vui l√≤ng x√≥a t·∫•t c·∫£ b√†i h·ªçc tr∆∞·ªõc.' 
          });
        }
      }

      // üéØ S·ª¨A: X·ª≠ l√Ω schedules n·∫øu c√≥
      if (updateData.schedules && Array.isArray(updateData.schedules)) {
        updateData.schedules = updateData.schedules.map(schedule => {
          const scheduleDate = new Date(schedule.date);
          const dayOfWeek = scheduleDate.getDay();
          
          return {
            ...schedule,
            dayOfWeek: dayOfWeek,
            timezone: schedule.timezone || 'Asia/Ho_Chi_Minh',
            meetingPlatform: schedule.meetingPlatform || 'zoom',
            isActive: schedule.isActive !== undefined ? schedule.isActive : true,
            hasLesson: schedule.hasLesson || false
          };
        });
      }

      // N·∫øu instructor edit course ƒë√£ published, chuy·ªÉn v·ªÅ pending_review
      let newStatus = course.status;
      let approvalStatus = course.approvalStatus;
      
      if (req.userRole !== 'admin' && course.status === 'published') {
        newStatus = 'pending_review';
        approvalStatus = { status: 'pending', reason: 'Course updated by instructor' };
      }

      // Kh√¥ng cho ph√©p thay ƒë·ªïi m·ªôt s·ªë tr∆∞·ªùng quan tr·ªçng
      delete updateData.instructor;
      delete updateData.currentEnrollments;
      delete updateData.ratings;
      delete updateData._id;
      delete updateData.createdAt;

      const updatedCourse = await Course.findByIdAndUpdate(
        courseId,
        { 
          ...updateData,
          status: newStatus,
          approvalStatus,
          updatedAt: new Date()
        },
        { new: true, runValidators: true }
      ).populate('lessons');

      const instructorInfo = await getInstructorInfo(updatedCourse.instructor);
      const courseWithInstructor = {
        ...updatedCourse.toObject(),
        instructor: {
          _id: instructorInfo._id,
          fullName: instructorInfo.fullName,
          email: instructorInfo.email,
          profile: { avatar: instructorInfo.profile?.avatar }
        }
      };

      res.json({
        message: req.userRole !== 'admin' && course.status === 'published' 
          ? 'C·∫≠p nh·∫≠t kh√≥a h·ªçc th√†nh c√¥ng v√† ƒë√£ g·ª≠i ƒë·ªÉ admin ph√™ duy·ªát l·∫°i' 
          : 'C·∫≠p nh·∫≠t kh√≥a h·ªçc th√†nh c√¥ng',
        course: courseWithInstructor
      });
    } catch (error) {
      console.error('Edit course error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  startLessonMeeting: async (req, res) => {
    try {
      const { lessonId } = req.params;

      if (!mongoose.Types.ObjectId.isValid(lessonId)) {
        return res.status(400).json({ message: 'ID b√†i h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const lesson = await Lesson.findById(lessonId);
      if (!lesson) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i h·ªçc' });
      }

      const course = await Course.findById(lesson.courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn b·∫Øt ƒë·∫ßu bu·ªïi h·ªçc' });
      }

      const meetingId = `skillshare-${course._id}-${lesson._id}-${Date.now()}`;
      const meetingUrl = `https://meet.jit.si/${meetingId}`;

      lesson.meetingUrl = meetingUrl;
      lesson.meetingId = meetingId;
      lesson.isMeetingActive = true;
      lesson.actualStartTime = new Date();
      lesson.actualEndTime = undefined;

      await lesson.save();

      res.json({
        success: true,
        meetingUrl: lesson.meetingUrl,
        meetingId: lesson.meetingId,
        message: 'Bu·ªïi h·ªçc ƒë√£ ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu'
      });

    } catch (error) {
      console.error('Start lesson meeting error:', error);
      res.status(500).json({ 
        success: false,
        message: 'L·ªói khi b·∫Øt ƒë·∫ßu bu·ªïi h·ªçc', 
        error: error.message 
      });
    }
  },

  endLessonMeeting: async (req, res) => {
    try {
      const { lessonId } = req.params;

      if (!mongoose.Types.ObjectId.isValid(lessonId)) {
        return res.status(400).json({ message: 'ID b√†i h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const lesson = await Lesson.findById(lessonId);
      if (!lesson) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i h·ªçc' });
      }

      const course = await Course.findById(lesson.courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn k·∫øt th√∫c bu·ªïi h·ªçc' });
      }

      lesson.isMeetingActive = false;
      lesson.actualEndTime = new Date();
      lesson.currentParticipants = 0;

      await lesson.save();

      res.json({
        success: true,
        message: 'Bu·ªïi h·ªçc ƒë√£ ƒë∆∞·ª£c k·∫øt th√∫c v√† s·ªë l∆∞·ª£ng ng∆∞·ªùi tham gia ƒë√£ ƒë∆∞·ª£c reset'
      });

    } catch (error) {
      console.error('End lesson meeting error:', error);
      res.status(500).json({ 
        success: false,
        message: 'L·ªói khi k·∫øt th√∫c bu·ªïi h·ªçc', 
        error: error.message 
      });
    }
  },

  joinLessonMeeting: async (req, res) => {
    try {
      const { lessonId } = req.params;

      if (!mongoose.Types.ObjectId.isValid(lessonId)) {
        return res.status(400).json({ message: 'ID b√†i h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const lesson = await Lesson.findById(lessonId);
      if (!lesson) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i h·ªçc' });
      }

      const course = await Course.findById(lesson.courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      // üéØ S·ª¨A L·ªñI: ƒê·ªïi userId th√†nh studentId
      const enrollment = await Enrollment.findOne({ 
        studentId: req.userId,  // S·ª≠a t·ª´ userId th√†nh studentId
        courseId: lesson.courseId 
      });

      console.log('üîç Enrollment check:', {
        studentId: req.userId,
        courseId: lesson.courseId,
        enrollmentFound: !!enrollment,
        enrollmentDetails: enrollment ? {
          _id: enrollment._id,
          hasFullAccess: enrollment.hasFullAccess,
          purchasedLessonsCount: enrollment.purchasedLessons?.length,
          status: enrollment.status
        } : null
      });

      const isAdmin = req.userRole === 'admin';
      const isInstructor = course.instructor.toString() === req.userId;
      
      if (!isAdmin && !isInstructor) {
        if (!enrollment) {
          console.log('‚ùå No enrollment found for user:', req.userId);
          return res.status(403).json({ message: 'B·∫°n ch∆∞a ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y' });
        }
        
        // üéØ TH√äM: Ki·ªÉm tra enrollment status
        if (enrollment.status !== 'active') {
          console.log('‚ùå Enrollment not active:', enrollment.status);
          return res.status(403).json({ 
            message: `Enrollment kh√¥ng active (status: ${enrollment.status})` 
          });
        }
        
        // üéØ C·∫¢I THI·ªÜN: Logic ki·ªÉm tra lesson access
        let hasLessonAccess = false;
        
        if (enrollment.hasFullAccess) {
          hasLessonAccess = true;
          console.log('‚úÖ User has full access to course');
        } else if (enrollment.purchasedLessons && enrollment.purchasedLessons.length > 0) {
          // Ki·ªÉm tra xem lessonId c√≥ trong purchasedLessons kh√¥ng
          const purchasedLesson = enrollment.purchasedLessons.find(
            p => p.lessonId && p.lessonId.toString() === lessonId
          );
          hasLessonAccess = !!purchasedLesson;
          console.log('üîç Checking purchased lessons:', {
            purchasedLessonsCount: enrollment.purchasedLessons.length,
            lookingForLessonId: lessonId,
            found: !!purchasedLesson
          });
        }
        
        if (!hasLessonAccess && !lesson.isPreview && !lesson.isFree) {
          console.log('‚ùå No lesson access:', {
            hasLessonAccess,
            isPreview: lesson.isPreview,
            isFree: lesson.isFree
          });
          return res.status(403).json({ 
            message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn tham gia bu·ªïi h·ªçc n√†y',
            details: {
              hasFullAccess: enrollment.hasFullAccess,
              purchasedThisLesson: hasLessonAccess,
              lessonIsPreview: lesson.isPreview,
              lessonIsFree: lesson.isFree
            }
          });
        }
      }

      if (!lesson.isMeetingActive) {
        return res.status(400).json({ message: 'Bu·ªïi h·ªçc ch∆∞a ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu' });
      }

      const maxParticipants = lesson.maxParticipants || course.maxStudents;
      const currentParticipants = lesson.currentParticipants || 0;
      
      if (currentParticipants >= maxParticipants) {
        return res.status(400).json({ 
          message: `Ph√≤ng h·ªçc ƒë√£ ƒë·∫ßy (${currentParticipants}/${maxParticipants})`,
          currentParticipants,
          maxParticipants
        });
      }

      lesson.currentParticipants = currentParticipants + 1;
      await lesson.save();

      let displayName = 'Student';
      try {
        const userServiceUrl = process.env.USER_SERVICE_URL || 'http://user-service:3001';
        const userRes = await axios.get(`${userServiceUrl}/internal/${req.userId}`, { 
          timeout: 5000 
        });
        displayName = userRes.data.fullName || 'Student';
      } catch (error) {
        console.error('Error fetching user info:', error.message);
        displayName = req.userFullName || 'Student';
      }

      console.log('‚úÖ User can join meeting:', {
        userId: req.userId,
        displayName,
        userRole: isInstructor ? 'teacher' : 'student',
        currentParticipants: lesson.currentParticipants
      });

      res.json({
        success: true,
        meetingUrl: lesson.meetingUrl,
        meetingId: lesson.meetingId,
        userRole: isInstructor ? 'teacher' : 'student',
        displayName,
        currentParticipants: lesson.currentParticipants,
        maxParticipants,
        message: 'C√≥ th·ªÉ tham gia bu·ªïi h·ªçc'
      });

    } catch (error) {
      console.error('Join lesson meeting error:', error);
      res.status(500).json({ 
        success: false,
        message: 'L·ªói khi tham gia bu·ªïi h·ªçc', 
        error: error.message 
      });
    }
  },

  // ========== LESSON CONTENT & RESOURCES ==========
  addLessonContent: async (req, res) => {
    try {
      const { lessonId } = req.params;
      const contentData = req.body;

      if (!mongoose.Types.ObjectId.isValid(lessonId)) {
        return res.status(400).json({ message: 'ID b√†i h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const lesson = await Lesson.findById(lessonId);
      if (!lesson) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i h·ªçc' });
      }

      const course = await Course.findById(lesson.courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m n·ªôi dung' });
      }

      if (!lesson.contents) {
        lesson.contents = [];
      }

      lesson.contents.push({
        ...contentData,
        addedAt: new Date(),
        addedBy: req.userId
      });

      await lesson.save();

      res.json({
        message: 'Th√™m n·ªôi dung th√†nh c√¥ng',
        lesson
      });
    } catch (error) {
      console.error('Add lesson content error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  removeLessonContent: async (req, res) => {
    try {
      const { lessonId, contentIndex } = req.params;

      if (!mongoose.Types.ObjectId.isValid(lessonId)) {
        return res.status(400).json({ message: 'ID b√†i h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const lesson = await Lesson.findById(lessonId);
      if (!lesson) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i h·ªçc' });
      }

      const course = await Course.findById(lesson.courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a n·ªôi dung' });
      }

      if (!lesson.contents || lesson.contents.length <= contentIndex) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y n·ªôi dung' });
      }

      lesson.contents.splice(contentIndex, 1);
      await lesson.save();

      res.json({
        message: 'X√≥a n·ªôi dung th√†nh c√¥ng',
        lesson
      });
    } catch (error) {
      console.error('Remove lesson content error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  addLessonResource: async (req, res) => {
    try {
      const { lessonId } = req.params;
      const resourceData = req.body;

      if (!mongoose.Types.ObjectId.isValid(lessonId)) {
        return res.status(400).json({ message: 'ID b√†i h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const lesson = await Lesson.findById(lessonId);
      if (!lesson) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i h·ªçc' });
      }

      const course = await Course.findById(lesson.courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m t√†i nguy√™n' });
      }

      if (!lesson.resources) {
        lesson.resources = [];
      }

      lesson.resources.push({
        ...resourceData,
        addedAt: new Date(),
        addedBy: req.userId
      });

      await lesson.save();

      res.json({
        message: 'Th√™m t√†i nguy√™n th√†nh c√¥ng',
        lesson
      });
    } catch (error) {
      console.error('Add lesson resource error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  removeLessonResource: async (req, res) => {
    try {
      const { lessonId, resourceIndex } = req.params;

      if (!mongoose.Types.ObjectId.isValid(lessonId)) {
        return res.status(400).json({ message: 'ID b√†i h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const lesson = await Lesson.findById(lessonId);
      if (!lesson) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i h·ªçc' });
      }

      const course = await Course.findById(lesson.courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a t√†i nguy√™n' });
      }

      if (!lesson.resources || lesson.resources.length <= resourceIndex) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y t√†i nguy√™n' });
      }

      lesson.resources.splice(resourceIndex, 1);
      await lesson.save();

      res.json({
        message: 'X√≥a t√†i nguy√™n th√†nh c√¥ng',
        lesson
      });
    } catch (error) {
      console.error('Remove lesson resource error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  // ========== COURSE IMAGE MANAGEMENT ==========
  uploadCourseImage: async (req, res) => {
    try {
      const { courseId } = req.params;
      const { type } = req.body; // 'thumbnail', 'cover', 'gallery'

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn upload ·∫£nh' });
      }

      // Trong th·ª±c t·∫ø, b·∫°n s·∫Ω x·ª≠ l√Ω file upload ·ªü ƒë√¢y
      // ƒê√¢y ch·ªâ l√† mock response
      const mockImageUrl = `https://example.com/images/${courseId}-${type}-${Date.now()}.jpg`;

      // C·∫≠p nh·∫≠t course v·ªõi image URL m·ªõi
      if (type === 'thumbnail') {
        course.thumbnail = mockImageUrl;
      } else if (type === 'cover') {
        course.coverImage = mockImageUrl;
      } else if (type === 'gallery') {
        if (!course.gallery) course.gallery = [];
        course.gallery.push({
          url: mockImageUrl,
          alt: `Gallery image for ${course.title}`,
          order: course.gallery.length
        });
      }

      await course.save();

      res.json({
        message: 'Upload ·∫£nh th√†nh c√¥ng',
        url: mockImageUrl
      });
    } catch (error) {
      console.error('Upload course image error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  addGalleryImage: async (req, res) => {
    try {
      const { courseId } = req.params;
      const imageData = req.body;

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m ·∫£nh' });
      }

      if (!course.gallery) {
        course.gallery = [];
      }

      course.gallery.push({
        ...imageData,
        order: course.gallery.length
      });

      await course.save();

      res.json({
        message: 'Th√™m ·∫£nh v√†o gallery th√†nh c√¥ng',
        gallery: course.gallery
      });
    } catch (error) {
      console.error('Add gallery image error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  removeGalleryImage: async (req, res) => {
    try {
      const { courseId, imageIndex } = req.params;

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ·∫£nh' });
      }

      if (!course.gallery || course.gallery.length <= imageIndex) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ·∫£nh' });
      }

      course.gallery.splice(imageIndex, 1);
      await course.save();

      res.json({
        message: 'X√≥a ·∫£nh kh·ªèi gallery th√†nh c√¥ng',
        gallery: course.gallery
      });
    } catch (error) {
      console.error('Remove gallery image error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  // ========== COURSE SCHEDULE MANAGEMENT ==========
  addCourseSchedule: async (req, res) => {
    try {
      const { courseId } = req.params;
      const scheduleData = req.body;

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m l·ªãch h·ªçc' });
      }

      // üéØ S·ª¨A: X·ª≠ l√Ω date v√† dayOfWeek
      const scheduleDate = new Date(scheduleData.date);
      const dayOfWeek = scheduleDate.getDay();

      const newSchedule = {
        ...scheduleData,
        dayOfWeek: dayOfWeek,
        timezone: scheduleData.timezone || 'Asia/Ho_Chi_Minh',
        meetingPlatform: scheduleData.meetingPlatform || 'zoom',
        isActive: true,
        hasLesson: false
      };

      if (!course.schedules) {
        course.schedules = [];
      }

      course.schedules.push(newSchedule);
      await course.save();

      res.json({
        message: 'Th√™m l·ªãch h·ªçc th√†nh c√¥ng',
        schedule: newSchedule
      });
    } catch (error) {
      console.error('Add course schedule error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  updateCourseSchedule: async (req, res) => {
    try {
      const { courseId, scheduleId } = req.params;
      const scheduleData = req.body;

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t l·ªãch h·ªçc' });
      }

      const schedule = course.schedules.id(scheduleId);
      if (!schedule) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªãch h·ªçc' });
      }

      // üéØ S·ª¨A: C·∫≠p nh·∫≠t date v√† dayOfWeek n·∫øu date thay ƒë·ªïi
      if (scheduleData.date && scheduleData.date !== schedule.date) {
        const scheduleDate = new Date(scheduleData.date);
        scheduleData.dayOfWeek = scheduleDate.getDay();
      }

      Object.assign(schedule, scheduleData);
      await course.save();

      res.json({
        message: 'C·∫≠p nh·∫≠t l·ªãch h·ªçc th√†nh c√¥ng',
        schedule
      });
    } catch (error) {
      console.error('Update course schedule error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  removeCourseSchedule: async (req, res) => {
    try {
      const { courseId, scheduleId } = req.params;

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a l·ªãch h·ªçc' });
      }

      const schedule = course.schedules.id(scheduleId);
      if (!schedule) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªãch h·ªçc' });
      }

      // Ki·ªÉm tra n·∫øu schedule ƒë√£ c√≥ lesson th√¨ kh√¥ng cho x√≥a
      if (schedule.hasLesson) {
        return res.status(400).json({ 
          message: 'Kh√¥ng th·ªÉ x√≥a l·ªãch h·ªçc ƒë√£ c√≥ b√†i h·ªçc. Vui l√≤ng x√≥a b√†i h·ªçc tr∆∞·ªõc.' 
        });
      }

      course.schedules.pull(scheduleId);
      await course.save();

      res.json({
        message: 'X√≥a l·ªãch h·ªçc th√†nh c√¥ng'
      });
    } catch (error) {
      console.error('Remove course schedule error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  // ========== ANALYTICS & STATISTICS ==========
  getLessonStats: async (req, res) => {
    try {
      const { courseId } = req.params;

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem th·ªëng k√™' });
      }

      const lessons = await Lesson.find({ courseId });
      
      const stats = {
        totalLessons: lessons.length,
        publishedLessons: lessons.filter(l => l.status === 'published').length,
        draftLessons: lessons.filter(l => l.status === 'draft').length,
        liveLessons: lessons.filter(l => l.isMeetingActive).length,
        totalDuration: lessons.reduce((sum, lesson) => sum + (lesson.duration || 0), 0),
        averageDuration: lessons.length > 0 ? 
          lessons.reduce((sum, lesson) => sum + (lesson.duration || 0), 0) / lessons.length : 0,
        lessonsByType: lessons.reduce((acc, lesson) => {
          acc[lesson.lessonType] = (acc[lesson.lessonType] || 0) + 1;
          return acc;
        }, {}),
        totalViewCount: lessons.reduce((sum, lesson) => sum + (lesson.viewCount || 0), 0)
      };

      res.json({
        success: true,
        stats
      });
    } catch (error) {
      console.error('Get lesson stats error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  getCourseStats: async (req, res) => {
    try {
      const { courseId } = req.params;

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem th·ªëng k√™' });
      }

      const enrollments = await Enrollment.find({ courseId });
      const lessons = await Lesson.find({ courseId });

      const stats = {
        totalEnrollments: enrollments.length,
        activeEnrollments: enrollments.filter(e => e.status === 'active').length,
        completedEnrollments: enrollments.filter(e => e.status === 'completed').length,
        totalRevenue: enrollments.reduce((sum, enrollment) => {
          if (enrollment.hasFullAccess && course.fullCoursePrice) {
            return sum + course.fullCoursePrice;
          }
          return sum + enrollment.purchasedLessons.reduce((lessonSum, purchase) => 
            lessonSum + (purchase.price || 0), 0
          );
        }, 0),
        totalLessons: lessons.length,
        averageRating: course.ratings?.average || 0,
        ratingCount: course.ratings?.count || 0,
        availableSpots: course.maxStudents - course.currentEnrollments,
        completionRate: enrollments.length > 0 ? 
          (enrollments.filter(e => e.status === 'completed').length / enrollments.length) * 100 : 0
      };

      res.json({
        success: true,
        stats
      });
    } catch (error) {
      console.error('Get course stats error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  // üéØ S·ª¨A: API ƒë·ªÉ l·∫•y chi ti·∫øt schedules v·ªõi tr·∫°ng th√°i lesson
  getCourseSchedules: async (req, res) => {
    try {
      const { courseId } = req.params;

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId).select('schedules title instructor');
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      // Ch·ªâ instructor v√† admin m·ªõi ƒë∆∞·ª£c xem
      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem schedules' });
      }

      // L·∫•y t·∫•t c·∫£ lessons ƒë·ªÉ c√≥ th√¥ng tin chi ti·∫øt
      const lessons = await Lesson.find({ courseId }).select('scheduleId title order status');

      const dayNames = ['Ch·ªß nh·∫≠t', 'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'];

      const scheduleDetails = course.schedules.map(schedule => {
        const lesson = lessons.find(l => l.scheduleId && l.scheduleId.toString() === schedule._id.toString());
        
        // T√≠nh th·ªùi l∆∞·ª£ng
        let duration = '';
        if (schedule.startTime && schedule.endTime) {
          const start = new Date(`2000-01-01T${schedule.startTime}`);
          const end = new Date(`2000-01-01T${schedule.endTime}`);
          const diffMs = end.getTime() - start.getTime();
          const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
          const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
          
          if (diffHours > 0) {
            duration = `${diffHours} gi·ªù ${diffMinutes > 0 ? `${diffMinutes} ph√∫t` : ''}`;
          } else {
            duration = `${diffMinutes} ph√∫t`;
          }
        }

        return {
          _id: schedule._id,
          date: schedule.date,
          dayOfWeek: schedule.dayOfWeek,
          dayName: dayNames[schedule.dayOfWeek],
          startTime: schedule.startTime,
          endTime: schedule.endTime,
          duration: duration,
          timezone: schedule.timezone,
          meetingPlatform: schedule.meetingPlatform,
          isActive: schedule.isActive,
          hasLesson: schedule.hasLesson,
          lessonId: schedule.lessonId,
          lessonInfo: lesson ? {
            _id: lesson._id,
            title: lesson.title,
            order: lesson.order,
            status: lesson.status
          } : null,
          isAvailable: !schedule.hasLesson && schedule.isActive
        };
      });

      // S·∫Øp x·∫øp theo date
      scheduleDetails.sort((a, b) => new Date(a.date) - new Date(b.date));

      // Nh√≥m theo ng√†y ƒë·ªÉ d·ªÖ visualize
      const schedulesByDate = {};
      scheduleDetails.forEach(schedule => {
        if (!schedulesByDate[schedule.date]) {
          schedulesByDate[schedule.date] = [];
        }
        schedulesByDate[schedule.date].push(schedule);
      });

      res.json({
        success: true,
        course: { _id: course._id, title: course.title },
        schedules: scheduleDetails,
        schedulesByDate,
        summary: {
          totalSchedules: scheduleDetails.length,
          availableSchedules: scheduleDetails.filter(s => s.isAvailable).length,
          occupiedSchedules: scheduleDetails.filter(s => s.hasLesson).length,
          inactiveSchedules: scheduleDetails.filter(s => !s.isActive).length
        }
      });
    } catch (error) {
      console.error('Get course schedules error:', error);
      res.status(500).json({ 
        success: false,
        message: 'L·ªói server', 
        error: error.message 
      });
    }
  },

  getCourseEditHistory: async (req, res) => {
    try {
      const { courseId } = req.params;

      if (!mongoose.Types.ObjectId.isValid(courseId)) {
        return res.status(400).json({ message: 'ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá' });
      }

      const course = await Course.findById(courseId);
      if (!course) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc' });
      }

      if (req.userRole !== 'admin' && course.instructor.toString() !== req.userId) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem l·ªãch s·ª≠ ch·ªânh s·ª≠a' });
      }

      // Mock edit history - trong th·ª±c t·∫ø b·∫°n n√™n c√≥ collection ri√™ng
      const editHistory = [
        {
          _id: new mongoose.Types.ObjectId(),
          field: 'title',
          oldValue: 'Old Title',
          newValue: course.title,
          editedBy: req.userId,
          editedAt: new Date()
        },
        {
          _id: new mongoose.Types.ObjectId(),
          field: 'description',
          oldValue: 'Old Description',
          newValue: course.description,
          editedBy: req.userId,
          editedAt: new Date()
        }
      ];

      res.json({
        success: true,
        edits: editHistory
      });
    } catch (error) {
      console.error('Get course edit history error:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  }
};

module.exports = courseController;